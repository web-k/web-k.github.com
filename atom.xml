<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[web-k.log]]></title>
  <link href="http://web-k.github.com/atom.xml" rel="self"/>
  <link href="http://web-k.github.com/"/>
  <updated>2013-01-25T11:49:22+09:00</updated>
  <id>http://web-k.github.com/</id>
  <author>
    <name><![CDATA[Team web-k]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Internationalization (I18n) APIについて]]></title>
    <link href="http://web-k.github.com/blog/2013/01/22/rails-i18n/"/>
    <updated>2013-01-22T09:36:00+09:00</updated>
    <id>http://web-k.github.com/blog/2013/01/22/rails-i18n</id>
    <content type="html"><![CDATA[<p><a href="http://guides.rubyonrails.org/i18n.html">Ruby on Rails Guides: Rails Internationalization (I18n) API</a> を自己解釈しながら翻訳していきます。
この記事は3章までの内容になります。</p>

<h2>はじめに</h2>

<p>I18n(internationalization) Gem はRails2.2から提供されており、多言語をサポートしたアプリケーションを提供するためのフレームワークである。
「国際化(I18n:internationalization)」を行うとは、全ての文字を抽象化し、日付や通貨などロケール(地域や言語)によるものをアプリケーションの外に出すことである。
「地域化(L10n:localization)」を行うとは、それらアプリケーションの外に出したものに対して、翻訳やフォーマットを提供することである。</p>

<p>I18n化するために必要なこと</p>

<ul>
<li>I18nのサポートを確保すること</li>
<li>辞書ファイルの場所をRailsに教えること</li>
<li>ロケールの設定/選択の仕方をRailsに教えること</li>
</ul>


<p>L10n化するために必要なこと</p>

<ul>
<li>Railsのデフォルトロケールの補完を行うこと

<ul>
<li>例）日付/時間フォーマット、月の名前など</li>
</ul>
</li>
<li>アプリケーション中に辞書のキーに相当する抽象化された文字列を設定すること

<ul>
<li>例）フラッシュメッセージやView内の静的な文字列など</li>
</ul>
</li>
<li>どこかに翻訳結果の辞書を保存しておくこと</li>
</ul>


<h2>公開 I18n API</h2>

<p>最も重要なAPIが以下の2つ</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">translate</span> <span class="c1"># テキストの翻訳</span>
</span><span class='line'><span class="n">localize</span>  <span class="c1"># 日付/時間をロケールに合わせたフォーマットに変換</span>
</span><span class='line'><span class="no">I18n</span><span class="o">.</span><span class="n">t</span> <span class="s1">&#39;store.title&#39;</span><span class="err">　</span><span class="c1">#translateをtに短縮したもの</span>
</span><span class='line'><span class="no">I18n</span><span class="o">.</span><span class="n">l</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="err">　</span>   <span class="err">　</span><span class="c1">#localizeをlに短縮したもの</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Railsアプリケーションの初期化方法</h2>

<p>Railsのデフォルトではconfig/localesフォルダにある.rbと.ymlファイルを自動でロードする。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">en</span><span class="p">:</span>
</span><span class='line'>  <span class="n">hello</span><span class="p">:</span> <span class="s2">&quot;hello world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>このサンプルの場合は、:enロケールだった場合は「hello」というキーを「hello world」という文字列にマップする。</p>

<p>デフォルトのappllcation.rbファイルに辞書の追加の仕方やデフォルトロケールの設定の仕方がコメントアウトで載っている。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># The default locale is :en and all translations from config/locales/*.rb,yml are auto loaded.</span>
</span><span class='line'><span class="c1"># config.i18n.load_path += Dir[Rails.root.join(&#39;my&#39;, &#39;locales&#39;, &#39;*.{rb,yml}&#39;).to_s]</span>
</span><span class='line'><span class="c1"># config.i18n.default_locale = :de</span>
</span></code></pre></td></tr></table></div></figure>


<p>load_pathは辞書ファイルを自動ロードするための設定でRuby配列のパスになっている。
default_localeがデフォルトのロケール設定になる。無指定のときは英語がデフォルトロケールになる。</p>

<h3>ロケールの設定と渡し方</h3>

<p>複数のロケールを使う場合リクエスト中にロケール設定の仕方が必要になる。
ここで注意したいのは、sessionやcookieでロケールを保存して選択してはいけないことである。
ロケールはURLの一部に含めるべきで、URLを友人に送ったときは同じページで同じコンテンツで表示させるべきである。
RESTfulのアプローチでいけばこのルールから外れるべきではない。</p>

<p>簡単なロケールの設定の仕方は、ApplicationControllerのbefore_filterに以下のように書き、
URLのクエリとしてlocaleを渡す(例:http://localhost:3000?locale=de)方法である。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before_filter</span> <span class="ss">:set_locale</span>
</span><span class='line'><span class="k">def</span> <span class="nf">set_locale</span>
</span><span class='line'>  <span class="no">I18n</span><span class="o">.</span><span class="n">locale</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:locale</span><span class="o">]</span> <span class="o">||</span> <span class="no">I18n</span><span class="o">.</span><span class="n">default_locale</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ドメイン名からロケールを設定</h3>

<p>www.example.com なら英語、www.example.esならスペインのロケールというようにドメイン名でロケールを分ける。
トップレベルでロケールを設定すると以下のような利点がある。</p>

<ul>
<li>ロケールがURLに含まれるのが明らかであること</li>
<li>人々が直感的にコンテンツの言語を理解できること</li>
<li>簡単な構成</li>
<li>サーチエンジンが異なる言語のコンテンツは異なるドメインのリンクとして扱うことを期待できること</li>
</ul>


<p>ApplicationController以下のように記述すると実現できる。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before_filter</span> <span class="ss">:set_locale</span>
</span><span class='line'><span class="k">def</span> <span class="nf">set_locale</span>
</span><span class='line'>  <span class="no">I18n</span><span class="o">.</span><span class="n">locale</span> <span class="o">=</span> <span class="n">extract_locale_from_tld</span> <span class="o">||</span> <span class="no">I18n</span><span class="o">.</span><span class="n">default_locale</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># Get locale from top-level domain or return nil if such locale is not available</span>
</span><span class='line'><span class="c1"># You have to put something like:</span>
</span><span class='line'><span class="c1">#   127.0.0.1 application.com</span>
</span><span class='line'><span class="c1">#   127.0.0.1 application.it</span>
</span><span class='line'><span class="c1">#   127.0.0.1 application.pl</span>
</span><span class='line'><span class="c1"># in your /etc/hosts file to try this out locally</span>
</span><span class='line'><span class="k">def</span> <span class="nf">extract_locale_from_tld</span>
</span><span class='line'>  <span class="n">parsed_locale</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">host</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>  <span class="no">I18n</span><span class="o">.</span><span class="n">available_locales</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">parsed_locale</span><span class="o">.</span><span class="n">to_sym</span><span class="p">)</span> <span class="p">?</span> <span class="n">parsed_locale</span>  <span class="p">:</span> <span class="kp">nil</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>サブドメインに設定する場合は</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Get locale code from request subdomain (like http://it.application.local:3000)</span>
</span><span class='line'><span class="c1"># You have to put something like:</span>
</span><span class='line'><span class="c1">#   127.0.0.1 gr.application.local</span>
</span><span class='line'><span class="c1"># in your /etc/hosts file to try this out locally</span>
</span><span class='line'><span class="k">def</span> <span class="nf">extract_locale_from_subdomain</span>
</span><span class='line'>  <span class="n">parsed_locale</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">subdomains</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="no">I18n</span><span class="o">.</span><span class="n">available_locales</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">parsed_locale</span><span class="o">.</span><span class="n">to_sym</span><span class="p">)</span> <span class="p">?</span> <span class="n">parsed_locale</span> <span class="p">:</span> <span class="kp">nil</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>available_localesには定義済みのロケールリストが保存されている。</p>

<p>以下はロケールを切り替えるリンクの方法の例、APP_CONFIG[:deutsch_website_url]には「http://www.application.de」のような値が保存されている。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">link_to</span><span class="p">(</span><span class="s2">&quot;Deutsch&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">APP_CONFIG</span><span class="o">[</span><span class="ss">:deutsch_website_url</span><span class="o">]</span><span class="si">}#{</span><span class="n">request</span><span class="o">.</span><span class="n">env</span><span class="o">[</span><span class="s1">&#39;REQUEST_URI&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>URLパラメータからロケールを設定</h3>

<p>URLにロケールを含めるのは最も一般的な方法である。
先の例のparamsからロケールを設定する場合、全てのリクエストに　link_to( books_url(:locale => I18n.locale)))　のようなロケールを含めるのは大変であるので、
ApplicationController#default_url_optionsメソッドをオーバーライドする。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/controllers/application_controller.rb</span>
</span><span class='line'><span class="k">def</span> <span class="nf">default_url_options</span><span class="p">(</span><span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>  <span class="n">logger</span><span class="o">.</span><span class="n">debug</span> <span class="s2">&quot;default_url_options is passed options: </span><span class="si">#{</span><span class="n">options</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="p">{</span> <span class="ss">:locale</span> <span class="o">=&gt;</span> <span class="no">I18n</span><span class="o">.</span><span class="n">locale</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>これはurl_forメソッドのデフォルト設定をオーバーライドしているので、url_forメソッドを使ったもの(root_path/routesファイルのリソースパス)全てに自動でクエリがつくようになる。</p>

<p>www.example.com/en/booksのようなURLでロケールを設定する場合は、routesファイルで以下のようにpath_prefix付ける。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/routes.rb</span>
</span><span class='line'><span class="n">scope</span> <span class="s2">&quot;/:locale&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:books</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>クライアント情報からロケールを設定</h3>

<ul>
<li>Accept-Languageを使う方法</li>
</ul>


<p>ブラウザなどに含まれているHTTPヘッダーを使う</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">set_locale</span>
</span><span class='line'>  <span class="n">logger</span><span class="o">.</span><span class="n">debug</span> <span class="s2">&quot;* Accept-Language: </span><span class="si">#{</span><span class="n">request</span><span class="o">.</span><span class="n">env</span><span class="o">[</span><span class="s1">&#39;HTTP_ACCEPT_LANGUAGE&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="no">I18n</span><span class="o">.</span><span class="n">locale</span> <span class="o">=</span> <span class="n">extract_locale_from_accept_language_header</span>
</span><span class='line'>  <span class="n">logger</span><span class="o">.</span><span class="n">debug</span> <span class="s2">&quot;* Locale set to &#39;</span><span class="si">#{</span><span class="no">I18n</span><span class="o">.</span><span class="n">locale</span><span class="si">}</span><span class="s2">&#39;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="kp">private</span>
</span><span class='line'><span class="k">def</span> <span class="nf">extract_locale_from_accept_language_header</span>
</span><span class='line'>  <span class="n">request</span><span class="o">.</span><span class="n">env</span><span class="o">[</span><span class="s1">&#39;HTTP_ACCEPT_LANGUAGE&#39;</span><span class="o">].</span><span class="n">scan</span><span class="p">(</span><span class="sr">/^[a-z]{2}/</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>GeoIPなどのデータベースを使う方法</li>
</ul>


<p>クライアントのIPアドレスから地域の情報をマッピングしてロケールを決める。
GeoIP Lite Countryデータベースを使うと、IPアドレスから国/地域/市などを返してくれる。</p>

<ul>
<li>ユーザプロファイルからとる方法</li>
</ul>


<p>ユーザがアプリケーション内でロケールを設定できるようにして、データベースに保存する。</p>

<h2>アプリケーションの国際化</h2>

<p>以上で、Ruby on RailsアプリケーションのI18nサポートの初期化が終わった。
次にL10n化を行う。
つまり、全てのロケール固有のパーツを抽象化することと、その翻訳を用意することである。</p>

<h3>翻訳を追加</h3>

<p>Railsの「t」ヘルパーをキーと一緒に使って以下のように書ける。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/controllers/home_controller.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HomeController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span> <span class="o">=</span> <span class="n">t</span><span class="p">(</span><span class="ss">:hello_flash</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># app/views/home/index.html.erb</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&lt;</span><span class="sx">%=t :hello_world %&gt;&lt;/h1&gt;</span>
</span><span class='line'><span class="sx">&lt;p&gt;&lt;%=</span> <span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span> <span class="sx">%&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="c1"># config/locales/en.yml</span>
</span><span class='line'><span class="n">en</span><span class="p">:</span>
</span><span class='line'>  <span class="n">hello_world</span><span class="p">:</span> <span class="no">Hello</span> <span class="n">world!</span>
</span><span class='line'>  <span class="n">hello_flash</span><span class="p">:</span> <span class="no">Hello</span> <span class="n">flash!</span>
</span><span class='line'><span class="c1"># config/locales/pirate.yml</span>
</span><span class='line'><span class="n">pirate</span><span class="p">:</span>
</span><span class='line'>  <span class="n">hello_world</span><span class="p">:</span> <span class="no">Ahoy</span> <span class="no">World</span>
</span><span class='line'>  <span class="n">hello_flash</span><span class="p">:</span> <span class="no">Ahoy</span> <span class="no">Flash</span>
</span></code></pre></td></tr></table></div></figure>


<p>キーに該当する辞書ファイルが見つからない場合は <span class="translation_missing"> のようなタグがHTMLに入る。
辞書ファイルを追加する場合は、サーバの再起動が必要である。
辞書ファイルにはYAMLまたはRubyファイルが使われるが、Rails開発者の中ではYAMLが推奨されている。
しかし、YAMLはスペースや特殊文字に弱く、アプリケーションがロードに失敗することもある。
Rubyファイルは最初のリクエストでアプリケーションがクラッシュするので、間違いがわかりやすい。</p>

<h3>変数を渡して翻訳</h3>

<p>以下のようにしてViewから辞書ファイルに変数を渡せる。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/views/home/index.html.erb</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">%=t &#39;greet_username&#39;, :user =</span><span class="o">&gt;</span> <span class="s2">&quot;Bill&quot;</span><span class="p">,</span> <span class="ss">:message</span> <span class="o">=&gt;</span> <span class="s2">&quot;Goodbye&quot;</span> <span class="o">%&gt;</span>
</span><span class='line'><span class="c1"># config/locales/en.yml</span>
</span><span class='line'><span class="n">en</span><span class="p">:</span>
</span><span class='line'>  <span class="n">greet_username</span><span class="p">:</span> <span class="s2">&quot;%{message}, %{user}!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>日時フォーマットの追加</h3>

<p>時間フォーマットをl10n化するときはRailsメソッドの「l」ヘルパーを使って、Timeオブジェクトを渡す。
ヘルパーには :format オプションも渡せる。無指定の場合は:defaultフォーマットが使用される。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/views/home/index.html.erb</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;&lt;</span><span class="sx">%= l Time.now, :format =</span><span class="o">&gt;</span> <span class="ss">:short</span> <span class="sx">%&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="c1"># config/locales/pirate.yml</span>
</span><span class='line'><span class="n">pirate</span><span class="p">:</span>
</span><span class='line'>  <span class="n">time</span><span class="p">:</span>
</span><span class='line'>    <span class="n">formats</span><span class="p">:</span>
</span><span class='line'>      <span class="n">short</span><span class="p">:</span> <span class="s2">&quot;arrrround %H&#39;ish&quot;</span><span class="err">　</span><span class="c1"># %Hは24時間制の時</span>
</span></code></pre></td></tr></table></div></figure>


<p>辞書ファイルは以下で提供されているので、Gemで使うなり、config/localesにファイルを手動で置くなりして利用すると良い。
rails-i18n repository at Github(https://github.com/svenfuchs/rails-i18n/tree/master/rails/locale)</p>

<h3>L10n化したView</h3>

<p>Rails2.3からロケールによるテンプレート自動選択してくれるになった。
app/views/books/index.html.erbテンプレートを用意し、同階層にindex.es.html.erbファイルを置くと、
esロケールではesのerbファイルを参照し、デフォルトはindex.html.erbファイルが参照される。</p>

<h3>組織化された辞書ファイル</h3>

<p>1つのロケールに対して、1つの辞書ファイルだと、増えたときに管理するのが難しくなる。
よって、以下のように階層化するなどして管理するとよい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|-defaults
</span><span class='line'>|---es.rb
</span><span class='line'>|---en.rb
</span><span class='line'>|-models
</span><span class='line'>|---book
</span><span class='line'>|-----es.rb
</span><span class='line'>|-----en.rb
</span><span class='line'>|-views
</span><span class='line'>|---defaults
</span><span class='line'>|-----es.rb
</span><span class='line'>|-----en.rb
</span><span class='line'>|---books
</span><span class='line'>|-----es.rb
</span><span class='line'>|-----en.rb
</span><span class='line'>|---users
</span><span class='line'>|-----es.rb
</span><span class='line'>|-----en.rb
</span><span class='line'>|---navigation
</span><span class='line'>|-----es.rb
</span><span class='line'>|-----en.rb</span></code></pre></td></tr></table></div></figure>


<p>これはモデルとビュー内のモデル属性とデフォルトで分けた例である。
このようにネストした場合は、辞書ファイルがデフォルト設定ではロードされなくなるので、以下のように
書かなければならない。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/application.rb</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">i18n</span><span class="o">.</span><span class="n">load_path</span> <span class="o">+=</span> <span class="no">Dir</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;config&#39;</span><span class="p">,</span> <span class="s1">&#39;locales&#39;</span><span class="p">,</span> <span class="s1">&#39;**&#39;</span><span class="p">,</span> <span class="s1">&#39;*.{rb,yml}&#39;</span><span class="p">)</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="http://guides.rubyonrails.org/i18n.html#the-public-i18n-api">Ruby on Rails Guides: Rails Internationalization (I18n) API</a></li>
<li><a href="http://d.hatena.ne.jp/willnet/20100430/1272618929">Rails 3 の I18n について - おもしろWEBサービス開発日記</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[refinements]]></title>
    <link href="http://web-k.github.com/blog/2013/01/21/ruby-refinements/"/>
    <updated>2013-01-21T14:06:00+09:00</updated>
    <id>http://web-k.github.com/blog/2013/01/21/ruby-refinements</id>
    <content type="html"><![CDATA[<p>ruby 2.0.0の主な機能のうちのひとつ「Refinements」の挙動について。</p>

<h3>Refinementsとは</h3>

<p>既存のクラスの挙動を変更したり、拡張するときの影響範囲を名前空間で限定する機能です。
これまでも既存のクラスやメソッドに対する、動的な挙動の変更や追加は可能でしたが、以下のような問題もありました。</p>

<ul>
<li>プログラム全体に影響を与えてしまう</li>
<li>変更が見えにくい</li>
</ul>


<p>モンキーパッチをモジュールとして分割してincludeするなどして、
明示的にするなどの対処法はとられてきましたが、
refinmentsは書き換えをより厳密で局所的なものにとどめるものになっています。</p>

<p>例としてStringクラスに局所的にメソッドを追加するコードを示します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">HogeExtension</span>
</span><span class='line'>  <span class="n">refine</span> <span class="nb">String</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">to_camelcase</span>
</span><span class='line'>      <span class="nb">split</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">capitalize</span><span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">RefineTest</span>
</span><span class='line'>  <span class="n">using</span> <span class="no">HogeExtension</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="nb">p</span> <span class="s1">&#39;aaa_bbb_ccc&#39;</span><span class="o">.</span><span class="n">to_camelcase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">RefineTest</span><span class="o">.</span><span class="n">new</span>               <span class="c1"># =&gt; &quot;AaaBbbCcc&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="s1">&#39;aaa_bbb_ccc&#39;</span><span class="o">.</span><span class="n">to_camelcase</span> <span class="c1"># =&gt; NoMethodError</span>
</span></code></pre></td></tr></table></div></figure>


<p>HogeExtensionモジュールでは、Stringクラスに対するto_calmelcaseメソッドの追加をrefineキーワードで行なっています。
この実装は、HogeExtensionモジュールをusingキーワードでとりこんだRefineTestクラスでは適用されるので、利用できます。
しかし、それ以外の部分でStringクラスのインスタンスに対しては、利用できないことがわかります。</p>

<h3>スコープ</h3>

<p>refinementsは厳密なレキシカルスコープ(内部で定義した変数は外から見えないが、その逆は可能というスコープ)で動きます。
つまり、usingしたスコープと違うスコープに対しては、適用されません。
また、外側よりは内部の、前のよりは後の方が優先度が高く適用されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">HogeExtension</span>
</span><span class='line'>  <span class="n">refine</span> <span class="nb">String</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">plus_string</span>
</span><span class='line'>      <span class="nb">p</span> <span class="nb">self</span> <span class="o">+</span> <span class="s1">&#39; hoge&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">FugaExtension</span>
</span><span class='line'>  <span class="n">refine</span> <span class="nb">String</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">plus_string</span>
</span><span class='line'>      <span class="nb">p</span> <span class="nb">self</span> <span class="o">+</span> <span class="s1">&#39; fuga&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">RefineTest</span>
</span><span class='line'>  <span class="n">using</span> <span class="no">HogeExtension</span>
</span><span class='line'>  <span class="s1">&#39;outer1&#39;</span><span class="o">.</span><span class="n">plus_string</span>   <span class="c1"># =&gt; &quot;outer1 hoge&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Inner</span>
</span><span class='line'>    <span class="n">using</span> <span class="no">FugaExtension</span>
</span><span class='line'>    <span class="s1">&#39;inner1&#39;</span><span class="o">.</span><span class="n">plus_string</span> <span class="c1"># =&gt; &quot;inner1 fuga&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="s1">&#39;outer2&#39;</span><span class="o">.</span><span class="n">plus_string</span>   <span class="c1"># =&gt; &quot;outer2 hoge&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">using</span> <span class="no">FugaExtension</span>
</span><span class='line'>  <span class="s1">&#39;outer3&#39;</span><span class="o">.</span><span class="n">plus_string</span>   <span class="c1"># =&gt; &quot;outer3 fuga&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 拡張クラス内でも有効</span>
</span><span class='line'><span class="k">class</span> <span class="nc">RefineTestEx</span> <span class="o">&lt;</span> <span class="no">RefineTest</span>
</span><span class='line'>  <span class="s1">&#39;test&#39;</span><span class="o">.</span><span class="n">plus_string</span>     <span class="c1"># =&gt; &quot;test fuga&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>モジュールには適用できない</h3>

<p>モジュールのメソッドにはrefinementsを適用できません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">EnumerableExt</span>
</span><span class='line'>  <span class="c1"># エラー!</span>
</span><span class='line'>  <span class="n">refine</span> <span class="no">Enumerable</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>SelectorNamespcaceである</h3>

<p>これはちょっとややこしいので、例を示します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Hoge</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say_hoge</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;hoge&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">introduce</span>
</span><span class='line'>    <span class="nb">print</span> <span class="s1">&#39;This is &#39;</span>
</span><span class='line'>    <span class="n">say_hoge</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">instance</span> <span class="o">=</span> <span class="no">Hoge</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">instance</span><span class="o">.</span><span class="n">say_hoge</span>  <span class="c1"># =&gt; &#39;hoge&#39;</span>
</span><span class='line'><span class="n">instance</span><span class="o">.</span><span class="n">introduce</span> <span class="c1"># =&gt; &#39;This is hoge&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">HogeExtension</span>
</span><span class='line'>  <span class="n">refine</span> <span class="no">Hoge</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">say_hoge</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;fuga&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">using</span> <span class="no">HogeExtension</span>
</span><span class='line'><span class="n">instance</span><span class="o">.</span><span class="n">say_hoge</span>  <span class="c1"># =&gt; &#39;fuga&#39;</span>
</span><span class='line'><span class="n">instance</span><span class="o">.</span><span class="n">introduce</span> <span class="c1"># =&gt; &#39;This is hoge&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>26行目のintroduceに注目。
intstanceのintroduceが呼ぶのは元のAクラスのsay_hogeメソッドですので、&#8217;fuga&#8217;ではなく&#8217;hoge&#8217;の方が画面に出力されます。
これは、refinementsがレキシカルスコープで動くことの証拠です。
Aのintroduceメソッドは、それとは違うスコープで適用されたrefinementsの影響を受けません。
このような挙動をSelectorNamespcace と呼ぶそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[%i: シンボルの配列のリテラル]]></title>
    <link href="http://web-k.github.com/blog/2013/01/17/ruby-percent-i/"/>
    <updated>2013-01-17T15:59:00+09:00</updated>
    <id>http://web-k.github.com/blog/2013/01/17/ruby-percent-i</id>
    <content type="html"><![CDATA[<p>Ruby 2.0.0の主な機能のうちのひとつ「%i」の挙動について。</p>

<p>シンボルの配列がリテラルで書けるようになった。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">%</span><span class="n">i</span><span class="o">[</span><span class="n">hoge</span> <span class="n">fuga</span><span class="o">]</span> <span class="c1"># =&gt; [:hoge, :fuga]</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみに文字列の配列のリテラルは以下のようにする。(これは以前からあった)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%w[hoge fuga]</span> <span class="c1"># =&gt; [&quot;hoge&quot;, &quot;fuga&quot;]</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Module#prepend]]></title>
    <link href="http://web-k.github.com/blog/2013/01/17/ruby-prepend/"/>
    <updated>2013-01-17T15:48:00+09:00</updated>
    <id>http://web-k.github.com/blog/2013/01/17/ruby-prepend</id>
    <content type="html"><![CDATA[<p>Ruby 2.0.0の主な機能のうちのひとつ「Module#prepend」の挙動について。</p>

<p>prependは呼び出し元のクラス/モジュールの前にモジュールを置きます。
その呼ばれたモジュールの中で同じ名前を持つメソッドがあれば、それをラップします。
局所的なモンキーパッチを当てるような感じです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>    <span class="nb">p</span> <span class="s2">&quot;before&quot;</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>    <span class="nb">p</span> <span class="s2">&quot;after&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Bar</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>    <span class="nb">p</span> <span class="s2">&quot;bar&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">prepend</span> <span class="no">Foo</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Bar</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span> <span class="c1"># &quot;before&quot;, &quot;bar&quot;, &quot;after&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.0 キーワード引数]]></title>
    <link href="http://web-k.github.com/blog/2013/01/17/ruby-keyword-arguments/"/>
    <updated>2013-01-17T15:00:00+09:00</updated>
    <id>http://web-k.github.com/blog/2013/01/17/ruby-keyword-arguments</id>
    <content type="html"><![CDATA[<p>Ruby 2.0.0の主な機能のうちのひとつ「キーワード引数」の挙動について。</p>

<p>キーワード引数はメソッドのそれぞれの引数にその意味を示すキーワードを付与し、キーワードを通じて引数を渡せる機能です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_method</span><span class="p">(</span><span class="n">str</span><span class="p">:</span> <span class="s2">&quot;hoge&quot;</span><span class="p">,</span> <span class="n">num</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="o">[</span><span class="n">str</span><span class="p">,</span> <span class="n">num</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 実行結果</span>
</span><span class='line'><span class="n">my_method</span> <span class="c1"># =&gt; [&quot;hoge&quot;, 1]</span>
</span><span class='line'><span class="n">my_method</span><span class="p">(</span><span class="n">str</span><span class="p">:</span> <span class="s2">&quot;fuga&quot;</span><span class="p">)</span> <span class="c1"># =&gt; [&quot;fuga&quot;, 1]</span>
</span><span class='line'><span class="n">my_method</span><span class="p">(</span><span class="n">num</span><span class="p">:</span> <span class="mi">2</span><span class="p">)</span> <span class="c1"># =&gt; [&quot;hoge&quot;, 2]</span>
</span><span class='line'><span class="n">my_method</span><span class="p">(</span><span class="n">strrr</span><span class="p">:</span> <span class="s2">&quot;huga&quot;</span><span class="p">)</span> <span class="c1"># =&gt; ArgumentError: unknown keyword: strrr</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行時キーワード省略でデフォルト値が利用され、キーワード指定すると指定したものだけ値が書き換えられる。
引数全てを渡さなくてもよいというのも嬉しい。
定義されていないキーワードを指定すると当然ながらエラーとなる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Assets Pipeline]]></title>
    <link href="http://web-k.github.com/blog/2013/01/09/assets-pipeline/"/>
    <updated>2013-01-09T00:51:00+09:00</updated>
    <id>http://web-k.github.com/blog/2013/01/09/assets-pipeline</id>
    <content type="html"><![CDATA[<h2>この記事は</h2>

<p>基本は<a href="http://guides.rubyonrails.org/asset_pipeline.html">Ruby on Rails Guides: Asset Pipeline</a>の訳ですが簡略化や自分の解釈で意訳した部分が多々あります。気になる点あったらコメントください。</p>

<h2>Assets Pipelineとは</h2>

<p>Asset(アセット)とは、訳すと「資産」のこと。Assets Pipelineは画像やJavaScript、CSSを高速でリクエストを捌けるようにしたRails 3.1より標準搭載された仕組みです。</p>

<h2>Assets Pipelineで出来ること</h2>

<ul>
<li>Fingerprinting

<ul>
<li>コンテンツベースのファイル名に更新することによるキャッシュ支援</li>
</ul>
</li>
<li>Precompileを利用した高レベル言語でのコーディング

<ul>
<li>CSSに対してSass/SCSS/LESS、JavaScriptに対してCoffeeScript等の中間言語が使用可能</li>
<li>ERBも使用可能</li>
</ul>
</li>
<li>Assetの連結

<ul>
<li>複数のJavascriptやCSSをまとめてリクエスト数を減らす</li>
</ul>
</li>
<li>Assetの最小化と圧縮

<ul>
<li>CSSは空白削除、JavaScriptはif-elseを三項演算子化など、サイズ縮小のために最適化</li>
</ul>
</li>
</ul>


<p>Assets Pipelineはデフォルトで有効です。無効にしたければconfig/application.rbにて</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.assets.enabled = false</span></code></pre></td></tr></table></div></figure>


<p>を設定してください。また、アプリケーション作成時であれば</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails new appname --skip-sprockets</span></code></pre></td></tr></table></div></figure>


<p>と&#8211;skip-sporocketsオプションを付ける事でも無効にできます。ただし、何らかの理由が無ければ、デフォルトの状態で有効にしておくと高速化の面でも有利ですのでそのままにしておくべきでしょう。</p>

<h2>Assets Pipelineの使い方</h2>

<p>app/assetsディレクトリの中にAssetを配置します。今まではpublicに全て配置していて、利用は可能ですが、全て静的ファイルとしてのみ扱われます。</p>

<p>production環境のデフォルトでは事前にプリコンパイルを行い、public/assetsに配置して動作時にapp/assetsから直接出力せずパフォーマンスに配慮したデプロイを行います。</p>

<p>Assetの配置場所は</p>

<ul>
<li>app/assets</li>
<li>lib/assets</li>
<li>vendor/assets</li>
</ul>


<p>の三箇所があります。appはアプリケーション固有のもの、libは複数のアプリケーションでも利用できるもの、vendorはサードベンダーのJSプラグインやCSSフレームワークといったように使い分けると良いでしょう。</p>

<h3>Asset Pathの検索</h3>

<p>マニフェストやヘルパーよりファイルを参照すると、デフォルトではimages、javascripts、stylesheetsのサブディレクトリ内からファイルを探します。例えば、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>app/assets/javascripts/home.js
</span><span class='line'>lib/assets/javascripts/moovinator.js
</span><span class='line'>vendor/assets/javascripts/slider.js</span></code></pre></td></tr></table></div></figure>


<p>をJSマニフェストから参照するとすると</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//= require home
</span><span class='line'>//= require moovinator
</span><span class='line'>//= require slider</span></code></pre></td></tr></table></div></figure>


<p>ヘルパからだと</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;%= javascript_include_tag "home" %&gt;
</span><span class='line'>&lt;%= javascript_include_tag "moovinator" %&gt;
</span><span class='line'>&lt;%= javascript_include_tag "slider" %&gt;</span></code></pre></td></tr></table></div></figure>


<p>にて参照できます。</p>

<p>indexファイルはフォルダ名指定でlib/assets/library_name/index.jsを</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//= require library_name</span></code></pre></td></tr></table></div></figure>


<p>と参照可能です。ちなみにRails.application.config.assets.pathsを見るとAsset検索Pathが分かります。また、以下のようにconfig/application.rbにパスを追加できます</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.assets.paths &lt;&lt; Rails.root.join("app", "assets", "flash")</span></code></pre></td></tr></table></div></figure>


<p>重要なことは、検索したいファイルはプリコンパイル対象となっていることです。そうしないとproduction環境では利用できなくなってしまいます。</p>

<h2>Fingerprintingとは</h2>

<p>Fingerprintingとはファイル内容も加味されたファイルネーミングの仕組みです。ファイルの中身が変更されるとファイル名も更新されます。</p>

<p>これにより、CDNであったり、複数の別のサーバー上に配置したとしても、ファイル名によってコンテンツ内容が一意である事が分かり、キャッシュ最適化を行う事が可能になります。</p>

<p>Assets Pipelineではファイル名にMD5ハッシュが挿入されます。global.cssが元ファイルとすると、global-908e25f4bf641868d8683022a5b62f54.cssのようなファイル名となります。</p>

<p>Assets Pipeline導入前のRailsは時間ベースの文字列クエリを付加していましたが、以下のデメリットがありました：</p>

<ul>
<li>クエリだと確実にキャッシュする事を保証出来ない

<ul>
<li>CDN等でリクエストがキャッシュされないケースがあった</li>
</ul>
</li>
<li>複数のサーバに静的コンテンツを配置するとファイル名が異なる

<ul>
<li>ファイル時間が同一ファイルでも異なる事があるために無駄に読み込みがかかるケースがあった</li>
</ul>
</li>
<li>同一のファイルでも再度デプロイしたらキャッシュが利用されないことがある

<ul>
<li>更新日時が変更されたら再度読み込みを強いることになる</li>
</ul>
</li>
</ul>


<p>これらのデメリットをファイル内容に基づくファイル名の付加によって解消されました。</p>

<p>Fingerprintingはproduction環境で有効、その他の環境は無効にデフォルトはなっています。替えたい場合はconfig.assets.digest設定を変更して下さい。</p>

<h3>Assetへのリンク</h3>

<p>Assets Pipelineでは通常のリンクヘルパを利用すればOKです</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;%= stylesheet_link_tag "application" %&gt;
</span><span class='line'>&lt;%= javascript_include_tag "application" %&gt;
</span><span class='line'>&lt;%= image_tag "rails.png" %&gt;</span></code></pre></td></tr></table></div></figure>


<p>accetsパスへの検索、production環境であればMD5をファイル名に付加更新もここで行われます</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails-af27b6a414e6da00003503148be9b409.png</span></code></pre></td></tr></table></div></figure>


<h4>CSS/JavaScript/ERB</h4>

<p>Assets PipelineはERBにて評価可能です。application.css.erbのようにerbの拡張子を付加すれば次のように利用できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.class { background-image: url(&lt;%= asset_path 'image.png' %&gt;) }</span></code></pre></td></tr></table></div></figure>


<p>Base64形式として埋め込みヘルパもあります</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#logo { background: url(&lt;%= asset_data_uri 'logo.png' %&gt;) }</span></code></pre></td></tr></table></div></figure>


<p>application.js.cooffee.erbのようにCoffeeScriptにも利用できます</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$('#logo').attr src: "&lt;%= asset_path('logo.png') %&gt;"</span></code></pre></td></tr></table></div></figure>


<h3>アセットの依存関係と連結～マニフェストファイルとディレクティブ</h3>

<p>どのアセットを利用するかを決定するのにマニフェストファイルを利用します。CSS/JavaScriptにコメントにてディレクティブを記述します。また、Rails.application.config.assets.compressがtrueであれば連結します。連結することに単一ファイルになるのでリクエスト時間を減らせます。例えばapp/assets/javascripts/application.jsに以下のように記述します</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// ...
</span><span class='line'>//= require jquery
</span><span class='line'>//= require jquery_ujs
</span><span class='line'>//= require_tree .</span></code></pre></td></tr></table></div></figure>


<p>//=で行を始めてディレクティブを記載します。jquery.jsとjquery_ujs.jsはjquery-rails gemが提供しています。</p>

<p>require_treeは再帰検索を行います。対象パスのサブディレクトリも検索してすべてのファイルを出力します。サブディレクトリを検索しないで特定のディレクトリを指定したい場合はrequire_directoryを利用して下さい。</p>

<p>requireは上から順に処理されますが、require_treeは何処に記載しても順序は関係無いです。連結した場合でも、特定のJavascriptが一番最初に来るように保証したいのであれば、requireも一番最初に記述してください</p>

<p>CSSの例は以下のようになります</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* ...
</span><span class='line'>*= require_self
</span><span class='line'>*= require_tree .
</span><span class='line'>*/</span></code></pre></td></tr></table></div></figure>


<p>requre_selfはこれが呼び出された順序で自分のCSSを読み込むようになります。require_treeを使うとJSと同様に現在のディレクトリのすべてのスタイルシートを読み込みます。</p>

<p>複数のSassファイルを利用する時はSassの@importルールを使用スべきです。ディレクティブで記載してしまうと全Sassファイルはそれぞれのスコープ下に存在することになって変数やmixinが定義されたドキュメント内でしか利用できなくなります。</p>

<h3>Preprocessing</h3>

<p>Assetの拡張子で前処理が決まります。projects.js.coffeeとすればCoffeeScriptが、projects.css.scssとすればSCSSが処理されます。</p>

<p>複数の拡張子を付加すれば前処理の多重化も可能です。projects.css.scss.erbとすれば、拡張子は右側からERB、SCSSと処理され、最終的にCSSとして応答します。</p>

<p>この拡張子の処理順序は重要で、projects.js.erb.coffeeと記載してしまうと、ERB記述のままCoffeeScriptインタプリタが処理されてしまいエラーとなってしまいます。projects.js.coffee.erbの順で記載してください。</p>

<h3>JavaScriptの圧縮</h3>

<p>JavaScriptは:closure :uglifier :yuiの3種類が選べます。closure-compiler・uglifier・yui-compressorの各gemが必要です。Gemfileにはデフォルトでuglifierがあります。ホワイトスペースを削除し、if-else文を三項演算子に変更するなどの最適化をします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.assets.js_compressor = :uglifier</span></code></pre></td></tr></table></div></figure>


<p>JS圧縮を有効にするには以下の設定が必要です</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.assets.compress = true</span></code></pre></td></tr></table></div></figure>


<h3>Development環境</h3>

<p>development環境では連結されずに別々のファイルとなります</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//= require core
</span><span class='line'>//= require projects
</span><span class='line'>//= require tickets</span></code></pre></td></tr></table></div></figure>


<p>の記載では</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script src="http://web-k.github.com/assets/core.js?body=1" type="text/javascript"&gt;&lt;/script&gt;
</span><span class='line'>&lt;script src="http://web-k.github.com/assets/projects.js?body=1" type="text/javascript"&gt;&lt;/script&gt;
</span><span class='line'>&lt;script src="http://web-k.github.com/assets/tickets.js?body=1" type="text/javascript"&gt;&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<p>となります。但し、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.assets.debug = false</span></code></pre></td></tr></table></div></figure>


<p>と、デバッグモードをオフにすれば連結状態になります。</p>

<p>サーバに初回リクエストにてアセットはコンパイル・キャッシュされ、304を返すようになります。マニフェスト記載のどれかが変更があると新しくコンパイルしてファイルを応答します。</p>

<p>デバッグモードは以下でも有効に出来ます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;%= stylesheet_link_tag "application", :debug =&gt; true %&gt;
</span><span class='line'>&lt;%= javascript_include_tag "application", :debug =&gt; true %&gt;</span></code></pre></td></tr></table></div></figure>


<p>パフォーマンス的にはデバッグモードは不利なので切り替えが提供されています</p>

<h3>Production環境</h3>

<p>production環境ではFingerprintを利用します。プリコンパイル時にファイル内容に応じてMD5値が生成されてファイル名が更新されてディスクに格納されます。挿入された名前はマニフェスト、ヘルパーで補完されます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;%= javascript_include_tag "application" %&gt;
</span><span class='line'>&lt;%= stylesheet_link_tag "application" %&gt;</span></code></pre></td></tr></table></div></figure>


<p>にて</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script src="http://web-k.github.com/assets/application-908e25f4bf641868d8683022a5b62f54.js" type="text/javascript"&gt;&lt;/script&gt;
</span><span class='line'>&lt;link href="http://web-k.github.com/assets/application-4dd5b109ee3439da54f5bdfd78a80473.css" media="screen" rel="stylesheet" type="text/css" /&gt;</span></code></pre></td></tr></table></div></figure>


<p>となります。</p>

<p>config.assets.digest設定にてFingerprintのON/OFFを切り替えられます。production環境で有効、その他は無効になっています。通常はこのデフォルト設定は変更すべきではありません。キャッシュ制御がクライアント側で困難になるからです。</p>

<h3>Assetsのプリコンパイル</h3>

<p>development環境のデフォルトでは動的にAssetファイルがコンパイルされますが、production環境のデフォルトでは高速化を図るため、事前にコンパイルして静的ファイルとして配置するようになっています。これをプリコンパイルといいます。Railsではrakeタスクとして配布されています。</p>

<p>コンパイルされたAssetはconfig.assets.prefixに設定されたディレクトリに格納されます。デフォルトはpublic/assetsディレクトリです。</p>

<p>デプロイサーバー上でのプリコンパイルも可能ですが、ファイル書き込み権限が無い等、rakeタスクを直接実行出来ない時はローカルでrakeタスクを実行してください。実行するrakeタスクは、以下のようになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec rake assets:precompile</span></code></pre></td></tr></table></div></figure>


<p>プリコンパイルの実行速度を早めるためにconfig.assets.initialize_on_precompile設定をfalseに設定してRailsアプリケーションのロードをプリコンパイル時には部分的に行うようにすることが可能となります。Herokuではこの設定は必須となっています。</p>

<p>config.assets.initialize_on_precompile設定をfalseにした際は、ローカルでプリコンパイルが正しく実行出来るか確認してからでプロイして下さい。アプリケーションのオブジェクトやメソッドを参照していたりするとエラーが発生する場合があるので注意する必要があります。</p>

<p>Capistano(v2.8.0以降)にはプリコンパイル実行を制御するレシピが用意されています。以下の行をCapfileに追加してください。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>load 'deploy/assets'</span></code></pre></td></tr></table></div></figure>


<p>これによって、config.assets.prefixはshared/assetsディレクトリに設定されます。既にこのフォルダを利用していた場合は独自にrakeタスクを作成して下さい。</p>

<p>また、重要な点として、古いプリコンパイルされたAssetsファイルがページキャッシュ有効な間は正しく参照可能となるようにこのsharedフォルダはデプロイサーバー間で共有されている必要があります。</p>

<p>Assetsファイルをローカルでプリコンパイルする時は、デプロイ環境ではAsset関連のgemが必要なくなるので、以下のコマンドでassetsグループのgemを除外すると良いでしょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install --without assets</span></code></pre></td></tr></table></div></figure>


<p>プリコンパイルを行うファイルとして、application.js、application.cssとJS/CSSファイルではない全てのファイルが含まれます。もし、他にも独自のJS/CSSファイルを読み込みたい場合は以下のように追加設定する必要があります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.assets.precompile += ['admin.js', 'admin.css', 'swfObject.js']</span></code></pre></td></tr></table></div></figure>


<p>この設定により、rakeタスクによるmanifest.ymlにはassetsファイルとそのFingerprintsの対応付けが行われ、ヘルパを呼び出すたびにSprocketsによるFingerprintへのマッピングリクエストを回避する事が出来ます。マニフェストファイルの例は以下のような感じです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>rails.png: rails-bd9ad5a560b5a3a7be0808c5cd76a798.png
</span><span class='line'>jquery-ui.min.js: jquery-ui-7e33882a28fc84ad0e0e47e46cbf901c.min.js
</span><span class='line'>jquery.min.js: jquery-8a50feed8d29566738ad005e19fe1c2d.min.js
</span><span class='line'>application.js: application-3fdab497b8fb70d20cfc5495239dfc29.js
</span><span class='line'>application.css: application-8af74128f904600e41a6e39241464e03.css</span></code></pre></td></tr></table></div></figure>


<p>マニフェストファイルの配置場所はconfig.assets.prefixのルートディレクトリに配置されます。変更したい場合は以下にて設定出来ます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.assets.manifest = '/path/to/some/other/location'</span></code></pre></td></tr></table></div></figure>


<p>Production環境でプリコンパイルされたファイルが見つからなければ、存在しないファイル名と共にSprockets::Helpers::RailsHelper::AssetPaths::AssetNotPrecompiledError の例外がRaiseされます。</p>

<h4>サーバーの設定</h4>

<p>プリコンパイルされたAssetファイルはファイルシステム上に静的ファイルとして配置され、Webサーバーより直接提供出来ます。Fingerprintingのメリットを十分に生かすため、以下のようにサーバー設定を行う事が推奨されます。</p>

<p>Apache:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;LocationMatch "^/assets/.*$"&gt;
</span><span class='line'>  Header unset ETag
</span><span class='line'>  FileETag None
</span><span class='line'>  # RFC says only cache for 1 year
</span><span class='line'>  ExpiresActive On
</span><span class='line'>  ExpiresDefault "access plus 1 year"
</span><span class='line'>&lt;/LocationMatch&gt;</span></code></pre></td></tr></table></div></figure>


<p>nginx:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>location ~ ^/assets/ {
</span><span class='line'>  expires 1y;
</span><span class='line'>  add_header Cache-Control public;
</span><span class='line'> 
</span><span class='line'>  add_header ETag "";
</span><span class='line'>  break;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>プリコンパイル時、gzip圧縮(.gz)ファイルも同時に作成されます。WebサーバーではしばしばGzip圧縮転送の設定を行って転送量の軽減を図りますが、動的な圧縮だと、CPUの使用も懸念して圧縮率に妥協をすることがあります。この問題を解決するために事前に最小サイズとなるようにgzip圧縮ファイルを高圧縮率で作成した物を直接ディスクより提供する事でサーバー負荷を低減させるように設定する事もできます。</p>

<p>Nginxではgzip_staticを有効にする事により可能になります。設定は以下の通り。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>location ~ ^/(assets)/  {
</span><span class='line'>  root /path/to/public;
</span><span class='line'>  gzip_static on; # to serve pre-gzipped version
</span><span class='line'>  expires max;
</span><span class='line'>  add_header Cache-Control public;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>このディレクティブは大凡のコンパイル済みWebサーバーで利用出来ますが、出来ない場合はモジュールを追加してコンパイルする必要がある場合があります</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./configure --with-http_gzip_static_module</span></code></pre></td></tr></table></div></figure>


<p>Phusion Passengerと一緒にnginxをコンパイルする場合はこのオプションを指定する必要があります。</p>

<p>Apacheでも可能ですがやや困難です。トライしたいならググってください。</p>

<h3>動的コンパイル(Live Compilation)</h3>

<p>動的コンパイルをやりたい環境がある場合はSprocketsに全てのリクエストを投げる事も出来ます。以下のように設定します</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.assets.compile = true</span></code></pre></td></tr></table></div></figure>


<p>Assetの初回アクセス時にコンパイルされdevelopment環境よりも上位環境ではキャッシュされてMD5ハッシュ化されたファイル名が使用されます。</p>

<p>SprocketsはCache-Controlヘッダにmax-age=31536000を設定してきます。これはサーバー、クライアント間でリクエストされたデータは1年間キャッシュしても良いという取り決めになります。この事によりブラウザ等でのローカルキャッシュや中間キャッシュを行うことができるようになり、サーバーへのリクエスト削減が期待出来ます。</p>

<p>しかしながら、動的コンパイルは多くのメモリやサーバ負荷となり得るのでお勧め出来ません。</p>

<p>もし、JavaScriptランタイムが導入されていないproduction環境のサーバーデプロイしたい場合は以下をGemfileに追加してください</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>group :production do
</span><span class='line'>  gem 'therubyracer'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h2>パイプラインのカスタマイズ</h2>

<h3>CSS圧縮</h3>

<p>現在CSS圧縮エンジンとしてYUIがあります。YUIはCSSの最小化を行います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.assets.css_compressor = :yui</span></code></pre></td></tr></table></div></figure>


<p>config.assets.compressはtrueにしておく必要があります。</p>

<h3>JavaScript圧縮</h3>

<p>JS圧縮は:closure、:uglifierand、:yuiの3種類から選択出来ます。それぞれ、closure-compiler、uglifier、yui-compressorのgemが必要になります。</p>

<p>デフォルトでGemfileにはuglifierが指定されています。これはNodeJSで書かれたUglifierJSのRubyラッパーです。スペース削減やif文を3項演算子に変換する等JSの論理変換を行ってサイズ最小化が行われます。以下のように指定してください</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.assets.js_compressor = :uglifier</span></code></pre></td></tr></table></div></figure>


<p>JS圧縮指定時もconfig.assets.compressは有効である必要があります。</p>

<p>uglifierにはJSランタイムであるExecJSが必要になります。MacOSXやWindowsにはインストールされています。サポートされているOSに関してはExecJSのドキュメントをチェックして下さい。</p>

<h3>独自圧縮ロジックの定義</h3>

<p>自分で圧縮ロジックを定義する事もできます。compressメソッドで変換結果をリターンして下さい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Transformer
</span><span class='line'>  def compress(string)
</span><span class='line'>    do_something_returning_a_string(string)
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>利用するにはオブジェクトを指定します</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.assets.css_compressor = Transformer.new</span></code></pre></td></tr></table></div></figure>


<h3>assetsパスの変更</h3>

<p>Asset公開パスのデフォルトは /assets です。3.1にアップデートする際に既にこのURIが利用されていた等の際には以下にてパスを変更する事も出来ます</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.assets.prefix = "/some_other_path"</span></code></pre></td></tr></table></div></figure>


<h3>X-Sendfileヘッダ</h3>

<p>X-SendfileヘッダはWebサーバー自身がアプリケーションからのレスポンスをカスタマイズしてファイルをディスク上から直接読み込んで代わりにデータの受け渡しをします。デフォルトはオフですが、サポートされているなら有効にすることによりファイル提供の転送速度向上が期待できます。</p>

<p>Apache、nginxでサポートされており、以下をconfig/environments/production.rbに設定します</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># config.action_dispatch.x_sendfile_header = "X-Sendfile" # for apache
</span><span class='line'># config.action_dispatch.x_sendfile_header = 'X-Accel-Redirect' # for nginx</span></code></pre></td></tr></table></div></figure>


<p>既に存在しているアプリケーションのアップグレード時等に、production環境以外のX-Sendfileに対応していない環境化にこの設定をコピペしないように注意してください。</p>

<h2>キャッシュ</h2>

<p>Sprocketsはdeveloment、production環境でRailsのデフォルトキャッシュストアを利用します。</p>

<p>デフォルトstore以外を指定出来る事が今後の課題です。</p>

<h2>Gemsを利用したAssetsの追加</h2>

<p>AssetsはGemsの形式でも外部ソースを取り込めます。</p>

<p>jquery-rails gem等が良い例です。一般的なJSライブラリを取り込めます。このgemにはRails::Engineが継承されたクラスを含んでいて、中に含まれているapp/assetsやlib/assets、vendor/assets等のディレクトをSprocketsの検索パスとして追加されます。</p>

<p>以上。あと、3.1以前からのアップデートの方法等載っていました。興味のある人は原文を参照してみてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyのrequire/load/autoload/include/extendについて]]></title>
    <link href="http://web-k.github.com/blog/2012/12/19/ruby-require-load/"/>
    <updated>2012-12-19T09:14:00+09:00</updated>
    <id>http://web-k.github.com/blog/2012/12/19/ruby-require-load</id>
    <content type="html"><![CDATA[<h3>require/load/autoload/include/extend の違いについて</h3>

<p>まず、ファイルをロードする require/load/autoload と ロードしない include/extend に分けられる。
違いについては、次で個別に説明した後に表にしてまとめる。</p>

<h4>require</h4>

<ul>
<li>Kernelモジュールのメソッド</li>
<li>同じファイルは複数回ロードされない</li>
<li>Rubyライブラリをロードする

<ul>
<li>RubyライブラリはRubyスクリプト(*.rb)と拡張ライブラリ(*.so,*.o,*.dllなど)を指す</li>
</ul>
</li>
<li>ロードするファイルパスは、絶対パスでも相対パスでも可</li>
<li>ロードするファイル名の拡張子は自動補完してくれるため、省略可(*.rb 優先)</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;ファイル名&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>load</h4>

<ul>
<li>Kernelモジュールのメソッド</li>
<li>同じファイルを再ロードできる</li>
<li>ロードするファイルパスは、絶対パスでも相対パスでも可</li>
<li>ロードするファイル名の拡張子は省略できない</li>
<li>拡張ライブラリは読み込み対象ではない(できないかは不明)</li>
<li>.txtのようなファイルでもロードできる</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">load</span> <span class="s1">&#39;ファイル名&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>autoload</h4>

<ul>
<li>Kernelモジュール(トップレベル)、Moduleクラス の2種類のメソッドがある</li>
<li>autoloadと書いた段階では、ファイルはロードされない

<ul>
<li>定数const_nameを参照したときに、はじめて第2引数であるファイルが require される</li>
<li>定数const_nameには&#8221;::&#8221;演算子が使えないため、ネストする場合は2種類のメソッドを組み合わせて使用する</li>
</ul>
</li>
<li>いずれ廃止されそうなメソッド

<ul>
<li><a href="http://www.ruby-forum.com/topic/3036681">autoload will be dead - Ruby Forum</a></li>
</ul>
</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">autoload</span><span class="p">(</span><span class="n">const_name</span><span class="p">,</span> <span class="s1">&#39;ファイル名&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>include</h4>

<ul>
<li>Moduleクラスのメソッド

<ul>
<li>Moduleクラスはクラスとモジュールを表し、ClassクラスはModuleのサブクラスになる</li>
</ul>
</li>
<li>クラスやモジュールに他のモジュールをインクルード（Mix-in）する

<ul>
<li>引数に指定できるのはモジュールのみ</li>
<li>引数に複数のモジュール指定可</li>
</ul>
</li>
<li>includeしたクラスのインスタンスメソッドとして使用可能</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">include</span><span class="p">(</span><span class="n">module</span><span class="p">,</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>extend</h4>

<ul>
<li>Objectクラスのメソッド</li>
<li>オブジェクトの特異クラスに引数に指定したモジュールを取り込み、モジュールのメソッドを特異メソッドとして使えるようにする

<ul>
<li>特異メソッドは特定のインスタンス固有のメソッドのこと

<ul>
<li>クラスを作った後にメソッドを追加すると特異メソッドになる</li>
</ul>
</li>
<li>特異クラスは特定のインスタンスのために用意されるクラスのこと

<ul>
<li>特異クラスは特異メソッドをまとめて定義するときなどに使用される</li>
</ul>
</li>
</ul>
</li>
<li>extendしたクラスのクラスメソッドとして使用可能(インスタンスメソッドではない)</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">extend</span><span class="p">(</span><span class="n">module</span><span class="p">,</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>extendは使用したことがなかったので、具体例を以下に示す。</p>

<figure class='code'><figcaption><span>extendの具体例 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Test</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="nb">self</span> <span class="o">+</span> <span class="s2">&quot;Test&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;Hoge&quot;</span>
</span><span class='line'><span class="n">str</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="no">Test</span><span class="p">)</span>
</span><span class='line'><span class="n">str</span><span class="o">.</span><span class="n">test</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="no">HogeTest</span>
</span></code></pre></td></tr></table></div></figure>


<h3>require/load/autoload の違い</h3>

<table>
<thead>
<tr>
<th>　 </th>
<th> require  </th>
<th> load     </th>
<th> autoload</th>
</tr>
</thead>
<tbody>
<tr>
<td>メソッドの定義元 </td>
<td> Kernelモジュール </td>
<td> Kernelモジュール </td>
<td> Kernelモジュール or Moduleクラス</td>
</tr>
<tr>
<td>複数回ロード </td>
<td> されない </td>
<td> される </td>
<td> されない(requireに従うので以下省略)</td>
</tr>
<tr>
<td>ロード時の拡張子省略 </td>
<td> 可 </td>
<td> 不可 </td>
<td></td>
</tr>
<tr>
<td>ロード可能ライブラリ </td>
<td> Rubyスクリプト+拡張ライブラリ </td>
<td> Rubyスクリプト </td>
<td></td>
</tr>
</tbody>
</table>


<p>requireはライブラリのロードをしたいとき、loadは設定ファイルなど再読み込み可能にしたいとき、というように使い分けられる。
また、拡張子が.rbや.soなどではない.txt(中身はruby)ファイルをロードしたいときにも load を使用する。</p>

<h3>include/extend の違い</h3>

<table>
<thead>
<tr>
<th>　 </th>
<th> include  </th>
<th> extend</th>
</tr>
</thead>
<tbody>
<tr>
<td>メソッドの定義元 </td>
<td> Moduleクラス </td>
<td> Objectクラス</td>
</tr>
<tr>
<td>振る舞い </td>
<td> includeしたクラスのインスタンスメソッドとして使用 </td>
<td> extendしたクラスのクラスメソッドとして使用</td>
</tr>
</tbody>
</table>


<p>振る舞いの違いがわかりにくいので、以下に例を示す。</p>

<figure class='code'><figcaption><span>include/extendの例 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Hoge</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;HogeTest&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">IncludeTest</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Hoge</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ExtendTest</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">Hoge</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">IncludeTest</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">test</span> <span class="c1">#インスタンスメソッド</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="no">HogeTest</span>
</span><span class='line'><span class="no">ExtendTest</span><span class="o">.</span><span class="n">test</span> <span class="c1">#クラスメソッド</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="no">HogeTest</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参考</h3>

<ul>
<li><a href="http://doc.ruby-lang.org/ja/1.9.3/doc/index.html">オブジェクト指向スクリプト言語 Ruby リファレンスマニュアル</a></li>
<li><a href="http://ref.xaio.jp/ruby">Rubyリファレンス</a></li>
<li><a href="http://qa.atmarkit.co.jp/q/2034">Rubyでrequireよりloadを使うべき場面は？ - QA@IT</a></li>
<li><a href="http://blog.livedoor.jp/faulist/archives/1220074.html">requireとincludeとextendとmodule_function(1) - As Sloth As Possible</a></li>
<li><a href="http://blog.livedoor.jp/sasata299/archives/51268600.html">Rubyで自作の外部モジュールを読み込む方法 - include と extend と module_function - (ﾟ∀ﾟ)o彡 sasata299&#8217;s blog</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails3 のroutes.rb]]></title>
    <link href="http://web-k.github.com/blog/2012/12/18/rails-routes/"/>
    <updated>2012-12-18T23:14:00+09:00</updated>
    <id>http://web-k.github.com/blog/2012/12/18/rails-routes</id>
    <content type="html"><![CDATA[<p>Rails3になってルーティングの書き方がずいぶん変ったので使い方をメモ。</p>

<h3>基本</h3>

<p>Rails3 でのアプリケーション作り始めにて、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails g scaffold article title:string</span></code></pre></td></tr></table></div></figure>


<p>などと打つと、色々なファイルが生成され、その中にはroutes.rbも含まれている。routes.rbの覗いてみると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resources</span> <span class="ss">:articles</span>
</span></code></pre></td></tr></table></div></figure>


<p>という記載がある。
これはリソースCRUD操作を行うためのURLとアクションを自動で設定してくれる。
RailsでCRUDを行うために用意されている7つのアクション(index, new, create, show, edit, update, destroy)とURLとの紐付けをresourcesを使うことによって一度にすることができる。
なお、routes.rbにresources, resourceなどと書いていくわけだが、ルーティングの優先順位は上から順となっている。</p>

<p>現在設定されているルーティングを確認するには、rake routesコマンド用いる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$rake</span> <span class="n">routes</span>
</span><span class='line'><span class="no">GET</span>             <span class="sr">/articles                 index        articles_path </span>
</span><span class='line'><span class="sr">GET             /</span><span class="n">articles</span><span class="o">/</span><span class="kp">new</span>             <span class="kp">new</span>          <span class="n">new_article_path</span>
</span><span class='line'><span class="no">POST</span>            <span class="sr">/articles                 create       articles_path</span>
</span><span class='line'><span class="sr">GET             /</span><span class="n">articles</span><span class="o">/</span><span class="ss">:id</span>             <span class="n">show</span>         <span class="n">article_path</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>
</span><span class='line'><span class="no">GET</span>             <span class="sr">/articles/</span><span class="ss">:id</span><span class="o">/</span><span class="n">edit</span>        <span class="n">edit</span>         <span class="n">edit_article_path</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>
</span><span class='line'><span class="no">PUT</span>             <span class="sr">/articles/</span><span class="ss">:id</span>             <span class="n">update</span>       <span class="n">article_path</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>
</span><span class='line'><span class="no">DELETE</span>          <span class="sr">/articles/</span><span class="ss">:id</span>             <span class="n">destroy</span>      <span class="n">article_path</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>id不要の場合</h3>

<p>基本で記載したresourcesを用いた場合は、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">GET</span>             <span class="sr">/articles/</span><span class="ss">:id</span>             <span class="n">show</span>         <span class="n">article_path</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように、URLにidが付加されている。
しかし、ユーザのプロフィール設定画面などidが不要な場合もあるので、そのような場合はresourcesではなく、resourceを用いる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resource</span> <span class="ss">:profile</span>
</span></code></pre></td></tr></table></div></figure>


<p>7つのCRUDアクションの内、indexは生成されなくなる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$rake</span> <span class="n">routes</span>
</span><span class='line'><span class="no">GET</span>        <span class="sr">/profile/ne</span><span class="n">w</span>      <span class="kp">new</span>       <span class="n">new_profile_path</span>
</span><span class='line'><span class="no">POST</span>       <span class="sr">/profile          create    profile_path</span>
</span><span class='line'><span class="sr">GET        /</span><span class="n">profile</span>          <span class="n">show</span>      <span class="n">profile_path</span>
</span><span class='line'><span class="no">GET</span>        <span class="sr">/profile/e</span><span class="n">dit</span>     <span class="n">edit</span>      <span class="n">edit_profile_path</span>
</span><span class='line'><span class="no">PUT</span>        <span class="sr">/profile          update    profile_path</span>
</span><span class='line'><span class="sr">DELETE     /</span><span class="n">profile</span>          <span class="n">destroy</span>   <span class="n">profile_path</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ルーティングの制限</h3>

<p>デフォルトのアクション7つのうち、不要なURLを生成したくない場合、:only 又は :except オプションを使用する。</p>

<p>:onlyオプションを用いると、指定したアクションのみ生成される。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resources</span> <span class="ss">:articles</span><span class="p">,</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:new</span><span class="p">,</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:show</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>:exceptオプションを用いると、指定したアクションは生成されない。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resources</span> <span class="ss">:articles</span><span class="p">,</span> <span class="ss">:except</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:destroy</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ルーティングの追加</h3>

<p>ルーティングの追加方法はリソースのidがURLに付くかどうかで、2つの方法がある。リソースidが付く方(/articles/1/preview みたいなの)をメンバールーティング、付かない方(/articles/preview みたいなの)をコレクションルーティングと呼ぶ。</p>

<p>メンバールーティングの追加</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resources</span> <span class="ss">:articles</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">member</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">get</span> <span class="s1">&#39;preview&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># 又は</span>
</span><span class='line'><span class="n">resources</span> <span class="ss">:articles</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;preview&#39;</span><span class="p">,</span> <span class="ss">:on</span> <span class="o">=&gt;</span> <span class="ss">:member</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>コレクションルーティングの追加</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resources</span> <span class="ss">:articles</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">collection</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">get</span> <span class="s1">&#39;preview&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># 又は</span>
</span><span class='line'><span class="n">resources</span> <span class="ss">:articles</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;preview&#39;</span><span class="p">,</span> <span class="ss">:on</span> <span class="o">=&gt;</span> <span class="ss">:collection</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>URLをピンポイントで指定</h3>

<p>ログアウトのリンクなど、どのユーザでも変らないURLをピンポイントで指定するには次のようにmatchを用いる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">match</span> <span class="s2">&quot;/authentication/logout&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;authentication#logout&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>メソッドの指定</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s2">&quot;/authentication/logout&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;authentication#logout&quot;</span>
</span><span class='line'><span class="c1"># 又は :viaオプションを用いて</span>
</span><span class='line'><span class="n">match</span> <span class="s2">&quot;/authentication/logout&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;authentication#logout&quot;</span><span class="p">,</span> <span class="ss">:via</span> <span class="o">=&gt;</span> <span class="ss">:get</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Named helperの設定</h3>

<p>Named helperとはprofile_pathなどと書いているもののこと。
これを設定するには、:as オプションを使って、ルーティングのための名前を指定する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">match</span> <span class="s2">&quot;/authentication/logout&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;authentication#logout&quot;</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:logout</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでlogout_pathやlogout_urlが使えるようになる。</p>

<h3>ネストしたURL</h3>

<p>リソースが１対他の関係にある場合、URLをネストさせることができる。
例えば、1つの記事(article)にいくつかのコメント(comment)がある場合には次のように書くことができる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resources</span> <span class="ss">:articles</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:comments</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>便利だが、ネストしすぎると混乱を招きそうなので、1回くらいにしておくとよい。
2回、3回とネストしなければならない場合、設計を見直す機会かもしれない。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$rake</span> <span class="n">routes</span>
</span><span class='line'><span class="no">GET</span>             <span class="sr">/articles/</span><span class="ss">:article_id</span><span class="o">/</span><span class="n">comments</span>                 <span class="n">index</span>        <span class="n">article_comments_path</span>
</span><span class='line'><span class="no">GET</span>             <span class="sr">/articles/</span><span class="ss">:article_id</span><span class="o">/</span><span class="n">comments</span><span class="o">/</span><span class="ss">:id</span>             <span class="n">show</span>         <span class="n">article_comment_path</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>トップページ(root)</h3>

<p>デフォルトで用意されているpublic/index.htmlを消去してから、次のように記載する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">root</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s2">&quot;articles#index&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Non-Resourceful Routes</h3>

<p>Non-Resourceful Routesとは、任意のURLをアクションにルーティングするためのサポート。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">match</span> <span class="s1">&#39;:controller(/:action(/:id))&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>というように書く。これで、GET articles/edit/1 すると、パラメータは次のようになる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="ss">:controller</span> <span class="o">=&gt;</span> <span class="s2">&quot;articles&quot;</span><span class="p">,</span> <span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s2">&quot;edit&quot;</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="s2">&quot;1&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>URLに特定の文字列を含む場合は、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">match</span> <span class="s1">&#39;:controller/:action/:id/with_user/:user_id&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>として、GET /articles/show/1/with_user/2すると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="ss">:controller</span> <span class="o">=&gt;</span> <span class="s2">&quot;articles&quot;</span><span class="p">,</span> <span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s2">&quot;show&quot;</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="ss">:user_id</span> <span class="o">=&gt;</span> <span class="s2">&quot;2&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>となる。</p>

<p>参考サイト：<a href="http://wiki.usagee.co.jp/ruby/rails/RailsGuides%E3%82%92%E3%82%86%E3%81%A3%E3%81%8F%E3%82%8A%E5%92%8C%E8%A8%B3%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F%E3%82%88/Rails%20Routing%20from%20the%20Outside%20In">ruby/rails/RailsGuidesをゆっくり和訳してみたよ/Rails Routing from the Outside In - 株式会社ウサギィwiki</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[enumerable::lazyをちょっとだけ]]></title>
    <link href="http://web-k.github.com/blog/2012/12/18/ruby-lazy/"/>
    <updated>2012-12-18T21:05:00+09:00</updated>
    <id>http://web-k.github.com/blog/2012/12/18/ruby-lazy</id>
    <content type="html"><![CDATA[<p>Ruby 2.0 で追加されたEnumerable::lazyをOKIソフトウェアさんの<a href="http://www.oki-osk.jp/esc/ruby/20-lazy.html">Ruby 2.0 メモ: Lazy と LINQ とループ融合</a>を参考に動かしてみました。</p>

<p>まずはrvmを最新にし、ruby 2.0をインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm get latest
</span><span class='line'>rvm list known # ruby 2.0 が追加されている事確認
</span><span class='line'>rvm install 2.0.0-preview2</span></code></pre></td></tr></table></div></figure>


<p>で、実験です。1から30までの整数で3が含まれるもの(3, 13, 23, 30)の最初の3つを求めるには</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">30</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="nb">print</span> <span class="n">i</span><span class="p">;</span> <span class="n">i</span><span class="o">.</span><span class="n">to_s</span><span class="p">}</span><span class="o">.</span><span class="n">select</span><span class="p">{</span><span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="nb">print</span> <span class="s1">&#39;-&#39;</span><span class="p">;</span> <span class="sr">/3/</span> <span class="o">===</span> <span class="n">s</span><span class="p">}</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="mi">123456789101112131415161718192021222324252627282930</span><span class="o">------------------------------=&gt;</span> <span class="o">[</span><span class="s2">&quot;3&quot;</span><span class="p">,</span> <span class="s2">&quot;13&quot;</span><span class="p">,</span> <span class="s2">&quot;23&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>このコードでは、</p>

<ol>
<li><p>map で各整数を文字列化</p></li>
<li><p>selectで文字列に3が出現するものを正規表現で選択する。=> [&#8220;3&#8221;, &#8220;13&#8221;, &#8220;23&#8221;, &#8220;30&#8221;]</p></li>
<li><p>takeで先頭の三つを取り出す。=> [&#8220;3&#8221;, &#8220;13&#8221;, &#8220;23&#8221;]</p></li>
</ol>


<p>で、指定した範囲の最後まで読み込んでから次の処理を行う。</p>

<p>これに対し、lazyを用いたコードは以下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">30</span><span class="p">)</span><span class="o">.</span><span class="n">lazy</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="nb">print</span> <span class="n">i</span><span class="p">;</span> <span class="n">i</span><span class="o">.</span><span class="n">to_s</span><span class="p">}</span><span class="o">.</span><span class="n">select</span><span class="p">{</span><span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="nb">print</span> <span class="s1">&#39;-&#39;</span><span class="p">;</span> <span class="sr">/3/</span> <span class="o">===</span> <span class="n">s</span><span class="p">}</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'><span class="mi">1</span><span class="o">-</span><span class="mi">2</span><span class="o">-</span><span class="mi">3</span><span class="o">-</span><span class="mi">4</span><span class="o">-</span><span class="mi">5</span><span class="o">-</span><span class="mi">6</span><span class="o">-</span><span class="mi">7</span><span class="o">-</span><span class="mi">8</span><span class="o">-</span><span class="mi">9</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="mi">13</span><span class="o">-</span><span class="mi">14</span><span class="o">-</span><span class="mi">15</span><span class="o">-</span><span class="mi">16</span><span class="o">-</span><span class="mi">17</span><span class="o">-</span><span class="mi">18</span><span class="o">-</span><span class="mi">19</span><span class="o">-</span><span class="mi">20</span><span class="o">-</span><span class="mi">21</span><span class="o">-</span><span class="mi">22</span><span class="o">-</span><span class="mi">23</span><span class="o">-=&gt;</span> <span class="o">[</span><span class="s2">&quot;3&quot;</span><span class="p">,</span> <span class="s2">&quot;13&quot;</span><span class="p">,</span> <span class="s2">&quot;23&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>先頭の3つを読み込んだところで終了しています。
これは、結果をArrayではなくEnumerable型として返すようにmapメソッドやselectメソッドを再定義し、実際に要素の値が必要になったとき、つまり、mapの処理はselectが呼ばれたときに開始、 selectの処理はtakeに呼ばれたときに開始…というように必要なときになったら呼び出すようになっています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Storageの使い方]]></title>
    <link href="http://web-k.github.com/blog/2012/11/12/webstorage/"/>
    <updated>2012-11-12T14:55:00+09:00</updated>
    <id>http://web-k.github.com/blog/2012/11/12/webstorage</id>
    <content type="html"><![CDATA[<h3>Web Storageとは</h3>

<p>Web Storageは、HTML5の周辺APIのひとつで、ブラウザにデータを保存するための仕組みです。データの保存・上書き・削除・全クリアなどの操作は、Javascriptで行います。
Web StorageはCookieとよく似ていますが、Cookieに比べてはるかに大きな容量のデータをブラウザに保存できます。
Web Storageには、sessionStorageとlocalStorageの2種類のストレージが用意されています。どちらもキーと値をペアにしたデータリストをブラウザに保存するkey-value型のデータ保存形式である点は同じですが、データの有効期限などが異なります。
対応している主要なブラウザはIE8以降、Firefox3.5以降、Safari4.0以降です。詳しくは<a href="http://caniuse.com/#feat=namevalue-storage">Can I use&#8230; Support tables for HTML5, CSS3, etc</a>をご覧ください。</p>

<h3>CookieとsessionStorageとlocalStorageの差異</h3>

<table>
<thead>
<tr>
<th>機能 </th>
<th> Cookie </th>
<th> sessionStorage </th>
<th> localStorage</th>
</tr>
</thead>
<tbody>
<tr>
<td>保存容量 </td>
<td> 4KB </td>
<td>  1オリジン当たり5MB(推奨) </td>
<td> 1オリジン当たり5MB(推奨)</td>
</tr>
<tr>
<td>データの有効期限 </td>
<td> 指定期限まで有効 </td>
<td> ウィンドウやタブを閉じるまで有効 </td>
<td> 永続的に有効</td>
</tr>
<tr>
<td>サーバーへのデータ送信 </td>
<td> 毎回自動送信 </td>
<td> 必要時のみ送信 </td>
<td> 必要時のみ送信</td>
</tr>
<tr>
<td>別ウィンドウでのデータ共有 </td>
<td> 可 </td>
<td> 不可 </td>
<td> 可</td>
</tr>
</tbody>
</table>


<p>オリジン： プロトコル://ドメイン名:ポート番号 のこと</p>

<h3>IE6, 7でローカルストレージを実現</h3>

<p>IE6, 7でWeb Storageを利用することはできないが、<a href="http://www.jstorage.info/">jStorage</a>というjQueryプラグインを利用することで、ローカルストレージを実現できる。
ただし、保存容量が128KBになるなどWeb Storageに劣るところはある。</p>

<h3>Web Storageのメソッドと使い方</h3>

<p>Web Storageで提供されているメソッドは、データの保存・取得・指定キーの値削除・全値クリアの4つです。メソッドはsessionStorageとlocalStorageで共通です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//データの保存
</span><span class='line'>setItem(key, value)
</span><span class='line'>
</span><span class='line'>//データの取得
</span><span class='line'>getItem(key)
</span><span class='line'>
</span><span class='line'>//指定キーの値削除
</span><span class='line'>removeItem(key)
</span><span class='line'>
</span><span class='line'>//全値クリア
</span><span class='line'>clear()</span></code></pre></td></tr></table></div></figure>


<p>データの上書きをする場合はもう一度keyとvalueを保存します。メソッドの使い方は以下の通り。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var storage = localStorage;
</span><span class='line'>
</span><span class='line'>//userIdキーに1を保存
</span><span class='line'>storage.setItem('userId', '1');
</span><span class='line'>
</span><span class='line'>//userIdキーに新たなvalueをセットし直せば上書き保存
</span><span class='line'>storage.setItem('userId', '2');
</span><span class='line'>
</span><span class='line'>//userIdキーの値を取得（2が返る）
</span><span class='line'>storage.getItem('userId');
</span><span class='line'>
</span><span class='line'>//userIdキーの値を削除
</span><span class='line'>storage.removeItem('userId');
</span><span class='line'>
</span><span class='line'>//ストレージにあるデータをすべてクリア
</span><span class='line'>storage.clear();</span></code></pre></td></tr></table></div></figure>


<h3>localStorage使用上の注意</h3>

<ol>
<li>cookieをブロックしている場合、localStorageが機能しない</li>
<li>cookieを削除するとlocalStorageのデータも消える</li>
</ol>


<p>より詳細な情報は<a href="http://himaxoff.blog111.fc2.com/blog-entry-193.html">無職のプログラミング Web Storageについて調べる</a>に記載されています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitでよく使う21コマンドまとめ]]></title>
    <link href="http://web-k.github.com/blog/2012/11/08/git/"/>
    <updated>2012-11-08T00:43:00+09:00</updated>
    <id>http://web-k.github.com/blog/2012/11/08/git</id>
    <content type="html"><![CDATA[<p>よく使うgitコマンドをリストアップしてみる</p>

<h3>リポジトリ作成: git init</h3>

<p>ローカルリポジトリを作成するにはリポジトリ名を指定する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git init repo
</span><span class='line'>Initialized empty Git repository in /Users/user/repo/.git/</span></code></pre></td></tr></table></div></figure>


<h3>リポジトリの設定: git config</h3>

<p>リポジトリ単位の設定は.git/config、ログインユーザ単位の設定は~/.gitconfigに、システム単位は/etc/gitconfigに格納されている。それぞれ、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config キー 値           # リポジトリ単位
</span><span class='line'>$ git config --global キー 値  # ログインユーザー単位
</span><span class='line'>$ git config --system キー 値  # システム単位</span></code></pre></td></tr></table></div></figure>


<p>にて値を設定出来る。各値はシステム→ログインユーザー→リポジトリ単位の順で読み込まれ、後から読み込んだほうが優先される。現在の設定は</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --list</span></code></pre></td></tr></table></div></figure>


<p>で参照可能。良く設定するキーは</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config user.name    # コミットユーザー名
</span><span class='line'>$ git config user.email   # コミットE-mail
</span><span class='line'>$ git config alias.*      # gitコマンドAlias</span></code></pre></td></tr></table></div></figure>


<h3>ファイルをインデックスに登録: git add</h3>

<p>gitの場合、ファイルを追加・更新しただけではまだコミット候補ではなく、インデックスに登録する必要がある。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add .     # カレントフォルダ以降のファイルをすべて登録
</span><span class='line'>$ git add path  # ファイル・フォルダの登録</span></code></pre></td></tr></table></div></figure>


<h3>リポジトリの状態を確認: git status</h3>

<p>ワーキングツリー・インデックスの状態を確認する。リポジトリとの現在のファイルの変更・修正状況、コミット候補としてインデックスに登録されているか確認出来る。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git status
</span><span class='line'># On branch source
</span><span class='line'># Changes not staged for commit:
</span><span class='line'>#   (use "git add &lt;file&gt;..." to update what will be committed)
</span><span class='line'>#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
</span><span class='line'>#
</span><span class='line'>#       modified:   .gitignore
</span><span class='line'>#
</span><span class='line'># Untracked files:
</span><span class='line'>#   (use "git add &lt;file&gt;..." to include in what will be committed)
</span><span class='line'>#
</span><span class='line'>#       source/_posts/2012-11-07-git.markdown
</span><span class='line'>no changes added to commit (use "git add" and/or "git commit -a")
</span><span class='line'>
</span><span class='line'>$ git status -s  # status簡易版
</span><span class='line'> M .gitignore
</span><span class='line'> ?? source/_posts/2012-11-07-git.markdown</span></code></pre></td></tr></table></div></figure>


<h3>差分を確認する: git diff</h3>

<p>リポジトリとの差分が確認出来る。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git diff  # ワーキングツリーの差分
</span><span class='line'>diff --git a/.gitignore b/.gitignore
</span><span class='line'>index 4bba145..b4bbc86 100644
</span><span class='line'>--- a/.gitignore
</span><span class='line'>+++ b/.gitignore
</span><span class='line'>@@ -11,4 +11,5 @@ source/_stash
</span><span class='line'>source/stylesheets/screen.css
</span><span class='line'>vendor
</span><span class='line'>node_modules
</span><span class='line'>-nbproject/*
</span><span class='line'>\ No newline at end of file
</span><span class='line'>+nbproject/*
</span><span class='line'>+*.swp
</span><span class='line'>
</span><span class='line'>$ git diff HEAD  # インデックスとリポジトリ最新との差分
</span><span class='line'>$ git diff master  # masterブランチとの差分
</span><span class='line'>$ git diff master develop  # masterブランチとdevelopブランチとの差分</span></code></pre></td></tr></table></div></figure>


<h3>コミットログの表示: git log</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git log  # 現在のブランチのログ表示
</span><span class='line'>$ git log -p  # 現在のブランチのdiffも含めてログ表示
</span><span class='line'>$ git log -2  # 最新2つのコミットログを表示
</span><span class='line'>$ git log --oneline --graph  # ログをコミット毎に1行フォーマットで表示し、コミットツリーを表示する</span></code></pre></td></tr></table></div></figure>


<h3>ディレクトリ・ファイルの移動: git mv</h3>

<p>コミット済みのファイルを移動・リネームする。コマンド実行するとコミット候補としてインデックスに登録される</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git mv file1 file2  # file1をfile2にリネームする
</span><span class='line'>$ git mv dir1/file dir2/file  # fileをdir1からdir2に移動する</span></code></pre></td></tr></table></div></figure>


<h3>ディレクトリ・ファイルの削除: git rm</h3>

<p>コミット済み、またはインデックスに登録済みのファイルを削除する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git rm file  # fileを削除する</span></code></pre></td></tr></table></div></figure>


<p>git rmをオプション無しで実行するとワーキングツリーからファイルが削除されるので、新規追加登録したファイルをインデックスから解除してファイルをワーキングツリーに残しておきたい場合は&#8211;cachedを使う</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add file
</span><span class='line'>$ git rm --cached file
</span><span class='line'>rm 'file'
</span><span class='line'>$ git status
</span><span class='line'># On branch master
</span><span class='line'>#
</span><span class='line'># Initial commit
</span><span class='line'>#
</span><span class='line'># Untracked files:
</span><span class='line'>#   (use "git add &lt;file&gt;..." to include in what will be committed)
</span><span class='line'>#
</span><span class='line'>#       file</span></code></pre></td></tr></table></div></figure>


<h3>コミットする: git commit</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git commit  # git addしておいたファイルのコミット。エディタが立ち上がってコメントを入力して保存するとコミットされる
</span><span class='line'>$ git commit -m "コメント"  # コメントを指定してコミット
</span><span class='line'>$ git commit -a  # すべての変更をコミット。ただし、新規ファイルは追加されない。明示的にgit addする必要がある</span></code></pre></td></tr></table></div></figure>


<h3>直前のコミットを変更する: git commit &#8211;amend</h3>

<p>&#8211;amendオプションを指定すると直前のコミットを追加修正したインデックス登録の差分を含めて差し替えることが出来る</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git commit --amend  # (インデックス登録が無ければ)直前のコミットコメントを変更する</span></code></pre></td></tr></table></div></figure>


<p>インデックス登録してある差分を含めて直前のコミットを変更する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add file  # fileをインデックスに追加
</span><span class='line'>$ git commit --amend  # addしたfileと直前のコミットをマージして差し替える</span></code></pre></td></tr></table></div></figure>


<h3>ローカルリポジトリ、インデックスを元に戻す: git reset</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git reset --hard commit_hash  # 指定したコミットにローカルリポジトリ、インデックスを完全に戻す。コミットしていない状態に戻り無かったことになる
</span><span class='line'>$ git reset --soft HEAD~  # 1つ前のコミットに戻す。ワーキングツリー・インデックスファイルは影響しない
</span><span class='line'>$ git reset --mixed HEAD~  # 1つ前のコミットにインデックス・リポジトリを戻す。ワーキングツリーには影響しない</span></code></pre></td></tr></table></div></figure>


<h3>grepする / git grep</h3>

<p>インデックスやワーキングツリーに対して検索する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git grep Text  # Textという文字列を検索する</span></code></pre></td></tr></table></div></figure>


<h3>コミット内容の表示: git show</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git show commit_hash  # コミット内容表示。差分も参照出来る</span></code></pre></td></tr></table></div></figure>


<h3>リモートリポジトリをローカルにコピー: git clone</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git-uri  # リモートリポジトリをコピー。フォルダ名はname.gitだったらnameになる。リモートリポジトリ名はoriginになる。
</span><span class='line'>$ git clone git-uri dir  # dirフォルダ名でリモートリポジトリをコピー
</span><span class='line'>$ git clone git-uri -o name  # リモートリポジトリ名をnameでコピー</span></code></pre></td></tr></table></div></figure>


<h3>リモートリポジトリの管理: git remote</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote  # 登録されているリポジトリ名の表示
</span><span class='line'>$ git remote -v  # リポジトリ名とURIの表示
</span><span class='line'>$ git remote add name git-uri  # リポジトリ名「name」にてgit-uriリモートリポジトリの登録
</span><span class='line'>$ git remote show origin  # originリモートリポジトリの詳細情報表示
</span><span class='line'>$ git remote update  # リモートリポジトリの更新。fetchでも済みそう
</span><span class='line'>$ git remote rm devel  # リモートリポジトリdevelの登録解除
</span><span class='line'>$ git remote prune  # 削除されたリモートブランチの削除</span></code></pre></td></tr></table></div></figure>


<h3>ブランチのマージ: git merge</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git merge develop  # 現在のブランチにdevelopをマージ
</span><span class='line'>$ git merge --squash develop  # 現在のブランチにdevelopのコミットを1つにまとめてマージ</span></code></pre></td></tr></table></div></figure>


<h3>リモートブランチにローカルブランチを送信: git push</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push origin master:master  # リモートリポジトリoriginにローカルブランチ(左のmaster)をリモートブランチ(右のmaster)に送信
</span><span class='line'>$ git push origin master  # リモートリポジトリにローカルブランチmasterを送信
</span><span class='line'>$ git push origin master:testing  # リモートブランチを指定
</span><span class='line'>$ git push origin :testing  # リモートブランチの削除</span></code></pre></td></tr></table></div></figure>


<h3>ローカルリポジトリにリモートリポジトリを取り込む: git pull</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git pull  # originリモートリポジトリをローカルリポジトリに取り込む</span></code></pre></td></tr></table></div></figure>


<p>ローカルリポジトリにコミットしていない変更がある場合、競合することがあるので、コミットしておくか、git stash saveして一旦ソースを待避してからpullすると良い。</p>

<h3>ブランチの管理: git branch</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git branch  # ローカルブランチの確認。現在のブランチも確認出来る
</span><span class='line'>$ git branch -r  # リモートブランチの確認
</span><span class='line'>$ git branch -a  # ローカル・リモートすべてのブランチの確認
</span><span class='line'>$ git branch new  # newブランチの作成
</span><span class='line'>$ git branch new base  # baseブランチを起点にnewブランチを作成
</span><span class='line'>$ git branch -m base rename  # baseブランチをrenameブランチに名称変更
</span><span class='line'>$ git branch -d base  # baseブランチの削除。このブランチのみ存在する新しいコミットがある場合は削除されないので安全
</span><span class='line'>$ git branch -D base  # baseブランチの削除。新しいコミットがあっても強制削除する</span></code></pre></td></tr></table></div></figure>


<h3>ブランチのスイッチ: git checkout</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout develop  # developブランチにスイッチ
</span><span class='line'>$ git checkout --merge develop  # ワーキングツリー・インデックスで修正があるファイルとスイッチ先ブランチをマージして切り替える
</span><span class='line'>$ git checkout -b new  # 現在のブランチを起点にnewブランチを作成
</span><span class='line'>$ git checkout -f  # 修正したワーキングツリーの修正を元に戻す。一度戻した修正は失われるので注意
</span><span class='line'>$ git checkout commit_hash file  # fileをcommit_hash時点の状態に戻す</span></code></pre></td></tr></table></div></figure>


<h3>未コミットの差分を一時的に保存する: git stash</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git stash save  # 一時的に保存する。新規ファイルを保存する場合はgit addしておくこと
</span><span class='line'>$ git stash pop  # 一時的に保存した差分を元に戻す
</span><span class='line'>$ git stash list  # 保存されているキューの一覧を表示する
</span><span class='line'>$ git stash drop stash@{1}  # stash@{1}を破棄。元に戻せないので注意
</span><span class='line'>$ git stash clear  # 保存されているキューを全て破棄。元に戻せないので注意</span></code></pre></td></tr></table></div></figure>


<p>以上よく使う21コマンドを紹介した。次回はgit rebaseの使い方とgit cherry-pickなど頻繁には使わないが有用そうなコマンドを紹介する。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpecで例外のテストをする]]></title>
    <link href="http://web-k.github.com/blog/2012/11/07/rspec-raise/"/>
    <updated>2012-11-07T23:14:00+09:00</updated>
    <id>http://web-k.github.com/blog/2012/11/07/rspec-raise</id>
    <content type="html"><![CDATA[<p>RSpecで例外のテストするにはlambdaを使用する。
例えば、adminというroleを持つUserのインスタンスに対し、destroyというインスタンスメソッドを実行すると、CannotDestroyAdminUserという例外が出るテストをする。その場合次のように書く。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;hoge hoge&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@user</span><span class="o">.</span><span class="n">roles</span><span class="o">=</span><span class="p">(</span><span class="o">[</span><span class="s1">&#39;admin&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>  <span class="nb">lambda</span><span class="p">{</span><span class="vi">@user</span><span class="o">.</span><span class="n">destroy</span><span class="p">}</span><span class="o">.</span><span class="n">should</span> <span class="n">raise_error</span><span class="p">(</span><span class="no">CannotDestroyAdminUser</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capybaraのドライバ]]></title>
    <link href="http://web-k.github.com/blog/2012/11/07/capybara-driver/"/>
    <updated>2012-11-07T16:37:00+09:00</updated>
    <id>http://web-k.github.com/blog/2012/11/07/capybara-driver</id>
    <content type="html"><![CDATA[<p>Capybaraは通常Rack:Testと呼ばれるブラウザエンジンを用い、仮想的に画面操作をしています。そのためJavascriptを考慮したテストはできません。
この場合、CapybaraのエンジンをJavascriptが動作する、capybara-webkitやSeleniumというブラウザエンジンに切り替えてテストを行います。
capybara_webkitを使うにはGemfileにcapybara-webkitを追記します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:test</span><span class="p">,</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;capybara-webkit&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>次にenv.rbにJavascriptドライバーを記述します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">default_selector</span> <span class="o">=</span> <span class="ss">:css</span>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">javascript_driver</span> <span class="o">=</span> <span class="ss">:webkit</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでJacascripがテストで動作する環境ができました。Javascriptを動作させたいところにRSpecだと</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;hoge hoge&quot;</span><span class="p">,</span> <span class="n">js</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cucumerだとシナリオに@javascriptタグを付加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@javascript</span>
</span><span class='line'><span class="err">シナリオ</span><span class="p">:</span> <span class="n">hoge</span> <span class="n">hoge</span>
</span></code></pre></td></tr></table></div></figure>


<p>ブラウザ別のテストを実施したいときはSeleniumドライバーを使います。
SeleniumドライバーはFirefox、InternetExplorer、GoogleChromeを実際に起動させてテストします。
SeleniumはCapybaraに同梱されているので、ブラウザエンジンを切り替えるだけで使用可能になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">default_driver</span> <span class="o">=</span> <span class="ss">:selenium</span>
</span></code></pre></td></tr></table></div></figure>


<p>デフォルトではFirefoxが起動するので、FirefoxではなくChromeを使用したいときには以下をCapybara.default_driverの前に記載します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">register_driver</span> <span class="ss">:Selenium</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
</span><span class='line'>  <span class="no">Capybara</span><span class="o">::</span><span class="no">Driver</span><span class="o">::</span><span class="no">Selenium</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">browser</span><span class="p">:</span> <span class="ss">:chrome</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Seleniumドライバーは実際のブラウザを起動するのでほとんどのJavascriptをテストできますが、オーバーヘッドが大きくなります。
従って、必要なテストにのみSeleniumドライバーを利用するようにします。
RSpecのフィルタで切り替える方法を載せます。この方法は特定のサンプルのみブラウザの切り替えを行います。
フィルタ機能を設定するには、spec_helper.rbにSelenium用のフィルターを用意します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:all</span><span class="p">,</span> <span class="n">selenium</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Capybara</span><span class="o">.</span><span class="n">current_driver</span> <span class="o">=</span> <span class="ss">:selenium</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">after</span><span class="p">(</span><span class="ss">:all</span><span class="p">,</span> <span class="n">selenium</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Capybara</span><span class="o">.</span><span class="n">use_default_driver</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>あとはSeleniumを実行したいサンプルにseleniumタグを追加します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;hoge hoge&quot;</span><span class="p">,</span> <span class="n">selenium</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActionScript 3.0]]></title>
    <link href="http://web-k.github.com/blog/2012/11/07/actionscript/"/>
    <updated>2012-11-07T10:57:00+09:00</updated>
    <id>http://web-k.github.com/blog/2012/11/07/actionscript</id>
    <content type="html"><![CDATA[<h3>ActionScript とは</h3>

<p>ActionScript は Adobe Flash Player や Adobe AIR のランタイム環境用の開発言語です。
開発環境には Adobe Flash CS6(オーサリングツール)/Adobe Flex Builder(統合開発環境)/Adobe Flex(コマンドラインのコンパイラ)がありますが、
有償であったりコマンドラインでコンパイルしなければならないので、
ここでは無償の統合開発環境である FlashDevelop を使用しています。
ActionScriptで書かれたコードを上記環境でコンパイルすることにより、SWF(Shockwave Flash file)ファイルが生成されます。
このSWFファイルをウェブページなどに組み込めば、ランタイム環境で動作させることができます。</p>

<p>ActionScript には ActionScript 1.0/2.0/3.0 の各バージョンがあり、2.0からオブジェクト指向言語になっています。
ECMAScriptをベースに作られているため、Javascriptに似ており。また、オブジェクト指向言語になり、Javaにも似ている言語となっています。</p>

<h3>文法</h3>

<p>基本的なことと気になったことについて書いていきます。</p>

<h4>変数宣言</h4>

<p>var 変数名:型 で宣言します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var num1:Number; //小数点付きまたは小数点なしの値を含むすべての数値
</span><span class='line'>var num2:int; //整数
</span><span class='line'>var num3:uint; //符号なし整数
</span><span class='line'>var boo:Boolean; //true か false の2値
</span><span class='line'>var str:String; //文字列</span></code></pre></td></tr></table></div></figure>


<p>などがあります。</p>

<h4>文字列</h4>

<p>文字列はシングルクォートかダブルクォートを使って定義します。\n(改行)などの特殊文字を入れることもできます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var str:String = "kaigyou¥n"</span></code></pre></td></tr></table></div></figure>


<p>文字列を操作するメソッドも用意されており、Rubyみたいに使えます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var str:String = "FLASH";
</span><span class='line'>trace(str.split(""));//traceを使用すると開発ツール上で実行したときに出力欄に表示される
</span><span class='line'>//>>F,L,A,S,H
</span><span class='line'>trace(str.length);//文字列の長さ
</span><span class='line'>//>>5
</span><span class='line'>trace([str, "TEST",].join("　"));//配列要素間を空白で結合
</span><span class='line'>//>>FLASH TEST</span></code></pre></td></tr></table></div></figure>


<p>上記コードだけでは実行できないので、以下のようにコードを.asファイルに記載して実行(FlashDevelopではF5)します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package 
</span><span class='line'>{
</span><span class='line'>  import flash.display.Sprite;
</span><span class='line'>  public class Main extends Sprite 
</span><span class='line'>  {
</span><span class='line'>      public function Main():void 
</span><span class='line'>      {
</span><span class='line'>          var str:String = "FLASH";
</span><span class='line'>          trace(str.split(""));
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>配列</h4>

<p>配列用の型があるので、Arrayで宣言します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var arr:Array;
</span><span class='line'>arr = [a,b,c];</span></code></pre></td></tr></table></div></figure>


<p>配列も文字列と同じようにメソッドが用意されており、操作できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var arr:Array = ['a','b','c'];
</span><span class='line'>arr.push('d'); //末尾にデータ追加
</span><span class='line'>trace(arr);
</span><span class='line'>//>>[a,b,c,d]
</span><span class='line'>arr.pop(); //末尾のデータ取り出し
</span><span class='line'>trace(arr);
</span><span class='line'>//>>[a,b,c]</span></code></pre></td></tr></table></div></figure>


<h4>ハッシュ</h4>

<p>Object型を使って、ハッシュを作ります。Object型はすべてのクラス定義の基本クラスです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var hash:Object = new Object();
</span><span class='line'>hash["program"] = "ActionScript"
</span><span class='line'>trace(hash["program"]);
</span><span class='line'>//>>ActionScript</span></code></pre></td></tr></table></div></figure>


<h4>ブロックスコープ</h4>

<p>変数は関数単位で管理しており、ブロック変数として宣言したつもりでも関数スコープになっています。(withを使えば、実現できるらしいです。)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//多重定義でコンパイルエラー
</span><span class='line'>for ( var i:Number = 0; i &lt; 1; i++) {
</span><span class='line'>  i = 1;
</span><span class='line'>}
</span><span class='line'>for ( var i:String = 0; i &lt; 1; i++) {
</span><span class='line'>  i = 'a';
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>例外</h2>

<p>Javaのように例外をキャッチできます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>try {
</span><span class='line'>    //例外が検出したい処理
</span><span class='line'>} catch (e:Error) {
</span><span class='line'>    // 例外処理
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>クラス</h2>

<p>以下のようにクラス定義します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package パッケージ名 { // パッケージ名省略可
</span><span class='line'>    import パッケージ.クラス名;
</span><span class='line'>    
</span><span class='line'>    public class Main(クラス名、仮にMain) extends 親クラス名
</span><span class='line'>    {
</span><span class='line'>        // 変数宣言
</span><span class='line'>        アクセス修飾子 var プロパティ名:プロパティの型;
</span><span class='line'>        
</span><span class='line'>        // コンストラクタ
</span><span class='line'>        アクセス修飾子 function Main()//コンストラクタ名
</span><span class='line'>        {
</span><span class='line'>            処理1
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        // メソッド1
</span><span class='line'>        アクセス修飾子 function メソッド名1(引数1:型 = デフォルト値):戻り値の型
</span><span class='line'>        {
</span><span class='line'>            処理2
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>表示リスト</h2>

<p>ActionScript 3.0 で構築されたアプリケーションには、表示リストと呼ばれるオブジェクトの階層があります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ステージ //Stageクラス
</span><span class='line'>  - SWFファイルのメインクラスのインスタンス //自分で定義したクラス
</span><span class='line'>    - 表示オブジェクト //TextFieldなど
</span><span class='line'>    - 表示オブジェクトコンテナ //Spriteクラス
</span><span class='line'>      -(表示オブジェクト/表示オブジェクトコンテナ)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ステージ</li>
</ul>


<p>表示オブジェクトの基本コンテナ、各アプリケーションには1つのStageオブジェクトがあり、この中に画面の表示オブジェクトがすべて含まれます。
ステージは、表示リスト階層の最上位にあたります。
それぞれのSWFファイルには関連するActionScriptクラスがあり、これがSWFファイルのメインクラスと呼ばれます。
SWFファイルのメインクラスは、Spriteクラスを拡張して定義します。
SWFファイルが Flash Player または Adobe AIR 上で開かれると、SWFファイルのメインクラスのコンストラクタ関数が呼ばれ、
作成されるインスタンスがStageオブジェクトに子として追加されます。</p>

<ul>
<li>表示オブジェクト</li>
</ul>


<p>ActionScript 3.0 では、アプリケーション内で表示される全てのエレメントタイプは、表示オブジェクトです。</p>

<ul>
<li>表示オブジェクトコンテナ</li>
</ul>


<p>表示オブジェクトコンテナは特殊な型の表示オブジェクトです。
表示オブジェクトコンテナ(単にコンテナともいいます)は、それ自体が表示オブジェクトコンテナ/表示オブジェクトを子オブジェクトに含むことができます。
表示オブジェクトコンテナに子オブジェクトを追加するには addChild関数を使います。
表示オブジェクトコンテナとなりうる表示オブジェクトは Stage/MovieClip/Spriteクラスです。</p>

<h2>Hello ActionScript</h2>

<p>Flash上に「Hello ActionScript」と文字列を表示させます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package hello
</span><span class='line'>{
</span><span class='line'>  import flash.display.Sprite; //画面表示の基本クラスのインポート
</span><span class='line'>  import flash.text.*; //テキスト系のクラス
</span><span class='line'>  public class Main extends Sprite
</span><span class='line'>  {
</span><span class='line'>      public function Main (){//コンストラクタ
</span><span class='line'>          var textField:TextField = new TextField();//入れ物確保
</span><span class='line'>          textField.text = "Hello ActionScript";//文字列挿入
</span><span class='line'>          addChild(textField);//textFieldをSpriteクラスに追加して表示
</span><span class='line'>      }   
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>参考</h4>

<ul>
<li><a href="http://help.adobe.com/ja_JP/ActionScript/3.0_ProgrammingAS3/">Adobe ActionScript 3.0 * Adobe Flash 用 Adobe ActionScript</a> - 公式ドキュメント</li>
<li><a href="http://blog.livedoor.jp/takaaki_bb/archives/51374100.html">読書メモ＋tips＋日記 : [Flash] ActionScript 3.0 基礎文法最速マスター</a></li>
<li><a href="http://www40.atwiki.jp/spellbound/">ActionScript入門Wiki - トップページ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[i18n(Internationalization)]]></title>
    <link href="http://web-k.github.com/blog/2012/10/22/internationalization-i18n/"/>
    <updated>2012-10-22T13:03:00+09:00</updated>
    <id>http://web-k.github.com/blog/2012/10/22/internationalization-i18n</id>
    <content type="html"><![CDATA[<p>Railsでi18nを使った多言語対応について調べたので、それについてまとめる。
今回は多言語対応の一般的な話をまとめる。</p>

<h3>多言語対応について</h3>

<p>ソフトウェアを多言語対応するときの工程として</p>

<ul>
<li>i18n(Internationalization:国際化)</li>
<li>l10n(Localization:地域化)</li>
<li>m17n(Multilingualization:多言語化)</li>
</ul>


<p>の各ステップがある。
名前の由来は最初と最後の文字と間の文字数からきている。i18nだとInternationalizationの最初のiと最後のn、その間に18文字あることからきている。</p>

<p>「i18n」とは、ソフトウェアに技術的な変更を加えることなく、多言語、多地域に対応させる枠組みを作っておくことである。
i18nに対応すると次に各言語においての対応を実装していく必要がある。それが「l10n」で、特定の1言語で必要とされる言語特有の機能等を実装し、対応させることである。
多言語に渡ってl10nの対応をし、利用者の言語に合わせて切り替えて表示できる状態が「m17n」対応となり、多言語対応となる。</p>

<h3>Railsにおける多言語対応</h3>

<p>Railsにはi18nの機能が標準でついており、利用することで多言語対応ができる。
詳しくは次回以降で記載する。</p>

<h3>参考</h3>

<ul>
<li><a href="http://www.atmarkit.co.jp/fxml/rensai/xmlwomanabou11/learning-xml11.html">多言語対応の問題と解決を考える</a></li>
<li><a href="http://guides.rubyonrails.org/i18n.html">Ruby on Rails Guides: Rails Internationalization (I18n) API</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsのbefore_filterとメソッド返り値]]></title>
    <link href="http://web-k.github.com/blog/2012/10/09/rails-filter/"/>
    <updated>2012-10-09T16:54:00+09:00</updated>
    <id>http://web-k.github.com/blog/2012/10/09/rails-filter</id>
    <content type="html"><![CDATA[<p>before_filterで実行したメソッドがfalseをreturnしたらどうなるか、気になったのでメモ。</p>

<p>確認した環境はRuby 1.9.3p194, Rails 3.2.8。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before_filter</span> <span class="ss">:false_filter</span>
</span><span class='line'><span class="c1">#  before_filter :redirect_filter</span>
</span><span class='line'>  <span class="n">before_filter</span> <span class="ss">:true_filter</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">false_filter</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">redirect_filter</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">root_path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">true_filter</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>true/falseだからといって特に何も起こらなかった。falseでもそのまま次のbefore_filterが実行されたり、filter後に控えているコントローラのメソッドが実行された。</p>

<p>before_filterやafter_filterはメソッドを優先して実行するかどうかを決めているだけであり、メソッドの返り値を受け取ってどうこうするというモノではないようだ。</p>

<p>ただし、before_filterで呼んだメソッドの中にrenderやredirect_to、raiseなどがあると、その後に控えている他のbefore_filterや以降のコントローラのメソッドは実行されない。</p>

<p>なお、<a href="http://www.fdiary.net/ml/rails/msg/3168">rails:3168</a>によると、rails 1.xではfilterにfalseが返ると、そこで処理が止まっていたようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nexus 7(Jelly Bean)のUser AgentとCSS 3D Transforms対応状況を調べてみた]]></title>
    <link href="http://web-k.github.com/blog/2012/10/08/nexus7/"/>
    <updated>2012-10-08T09:05:00+09:00</updated>
    <id>http://web-k.github.com/blog/2012/10/08/nexus7</id>
    <content type="html"><![CDATA[<p>今週末10/6にNexus 7が届いて楽しくいじり倒していたのだが、ブラウザでの以下の2点の大きな変更が気になっていた。</p>

<ul>
<li>Android 4.1 Jelly BeansからFlash Playerが未サポートになってGoogle Playから新規インストール出来なくなった。</li>
<li>標準ブラウザがChromeに変わった</li>
</ul>


<p>Flashが使えなくなったことでHTML5で対応する必要がでてくる(ていうかHTML5で対応出来ないと詰む)ことが多くなる。なので、各ブラウザアプリUser AgentとCSS 3D Transformsの挙動を実際に試してみる。</p>

<h3>User Agent</h3>

<table>
<thead>
<tr>
<th>ブラウザ </th>
<th> User Agent</th>
</tr>
</thead>
<tbody>
<tr>
<td>Chrome </td>
<td> Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03S) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166 Safari/535.19</td>
</tr>
<tr>
<td>Dolphin </td>
<td> Mozilla/5.0 (Linux; U; Android 4.1.1; ja-jp; Nexus 7 Build/JRO03S) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Safari/534.30</td>
</tr>
<tr>
<td>Firefox </td>
<td> Mozilla/5.0 (Android; Tablet; rv:15.0) Gecko/15.0 Firefox/15.0.1</td>
</tr>
<tr>
<td>Sleipnir </td>
<td> Mozilla/5.0 (Linux; U; Android 4.1.1; ja-jp; Nexus 7 Build/JRO03S) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Safari/534.30</td>
</tr>
<tr>
<td>OperaMobile </td>
<td> Opera/9.80 (Android 4.1.1; Linux; Opera Tablet/ADR-1207201819; U; ja) Presto/2.10.254 Version/12.00</td>
</tr>
</tbody>
</table>


<p>ICSの標準ブラウザでのUser Agentは後半が「AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30」になっているのでDolphinとSleipnirはJelly Beanになっても以前の標準ブラウザと同一エンジンで同じ挙動を示しそうな感じだ。</p>

<p>Firefoxはバージョン番号が含まれてないのでJelly Beanかどうか判断出来ないという結果に。Flash未サポートかどうかUser Agentで簡単に振り分けられなくなっちゃうので、出来ればバージョン番号も付加して改善して欲しいところ。</p>

<p>次にCSS 3D Transformsの挙動を見てCSS3の対応状況を見てみる。</p>

<h3>CSS 3D Transforms</h3>

<p>挙動の確認は6枚の画像をサイコロ風に並べたCube型に配置してFPSの様な視点を作ってグリグリ回して確かめた。結果は以下の通り</p>

<table>
<thead>
<tr>
<th>ブラウザ </th>
<th> 対応状況 </th>
<th> 挙動</th>
</tr>
</thead>
<tbody>
<tr>
<td>Chrome </td>
<td> △ </td>
<td>  CSSは認識しているがグリグリ動かすと画像落ちする</td>
</tr>
<tr>
<td>Dolphin </td>
<td> ◎ </td>
<td> FPSの視点でグリグリOK</td>
</tr>
<tr>
<td>Firefox </td>
<td> △ </td>
<td> 描写は出来て、画像落ちはしないが、使い物にならないくらい激重</td>
</tr>
<tr>
<td>Sleipnir </td>
<td> ◎ </td>
<td> Dolphinと同じでOK</td>
</tr>
<tr>
<td>OperaMobile </td>
<td> × </td>
<td> CSS/3D is not supported. と出る。3D表示出来ない</td>
</tr>
</tbody>
</table>


<p>ちなみにPCではFirefoxとChromeはWin/Mac共PCにGPU搭載されていればHWアクセラレーションがきちんと動作して問題なく動作する。</p>

<h3>結果</h3>

<p>△は(アニメーションしないならもしかしたら使える時もあるかもしれないが)実用不可なのでDolphinとSleipnirくらいしかまともに動かない。ICS標準ブラウザでは動作していたのにJelly BeanでChrome for Androidに変わったことでCSS 3D Transformsに関しては退化してしまったことになる。早急の改善をChrome for Androidにお願いしたい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FabricationとCucumberの連携]]></title>
    <link href="http://web-k.github.com/blog/2012/10/05/fabrication-cucumber/"/>
    <updated>2012-10-05T10:13:00+09:00</updated>
    <id>http://web-k.github.com/blog/2012/10/05/fabrication-cucumber</id>
    <content type="html"><![CDATA[<p>前回Fabricationの続きで、Cucumberと連携する方法についてここに記載します。</p>

<h2>Cucumber</h2>

<h3>インストール</h3>

<p>step_definitionsフォルダに便利な cucumber_steps を生成してくれるツールがgemの中にパッケージ化されている。
Gemfileのdevelopment環境にcucumber系を含めている必要がある。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rails</span> <span class="n">generate</span> <span class="n">fabrication</span><span class="ss">:cucumber_steps</span>
</span><span class='line'><span class="c1"># =&gt; create  features/step_definitions/fabrication_steps.rb</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Step Definitions</h3>

<p>WidgetモデルのFabricatorが定義されていれば、下記のように書くだけでFabricateできる。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="k">Given </span><span class="s">1</span><span class="nf"> widget</span>
</span></code></pre></td></tr></table></div></figure>


<p>Widgetモデルの属性を指定してFabricateすることもできる。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="k">Given </span><span class="nf">the following widget:</span>
</span><span class='line'><span class="k">  |</span><span class="s"> name</span><span class="k">      |</span><span class="s"> widget_1</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">  |</span><span class="s"> color</span><span class="k">     |</span><span class="s"> red</span><span class="k">      |</span><span class="nf"></span>
</span><span class='line'><span class="k">  |</span><span class="s"> adjective</span><span class="k"> |</span><span class="s"> awesome</span><span class="k">  |</span>
</span></code></pre></td></tr></table></div></figure>


<p>複数も可</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="k">Given </span><span class="s">10</span><span class="nf"> widgets</span>
</span></code></pre></td></tr></table></div></figure>


<p>属性付きで複数Fabricateする。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="k">Given </span><span class="nf">the following widgets:</span>
</span><span class='line'><span class="k">  |</span><span class="s"> name</span><span class="k">     |</span><span class="s"> color</span><span class="k"> |</span><span class="s"> adjective</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">  |</span><span class="s"> widget_1</span><span class="k"> |</span><span class="s"> red</span><span class="k">   |</span><span class="s"> awesome</span><span class="k">   |</span><span class="nf"></span>
</span><span class='line'><span class="k">  |</span><span class="s"> widget_2</span><span class="k"> |</span><span class="s"> blue</span><span class="k">  |</span><span class="s"> fantastic</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="nf">  ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>既にFabricateされた&#8221;widget&#8221;に&#8221;wockets&#8221;を所属させる。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="k">And </span><span class="nf">that widget has </span><span class="s">10</span><span class="nf"> wockets</span>
</span></code></pre></td></tr></table></div></figure>


<p>既にFabricateされた&#8221;widget&#8221;に&#8221;wockets&#8221;を属性を与えて所属させる。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="k">And </span><span class="nf">that widget has the following wocket</span>
</span><span class='line'><span class="k">  |</span><span class="s"> title</span><span class="k">    |</span><span class="s"> Amazing</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">  |</span><span class="s"> category</span><span class="k"> |</span><span class="s"> fancy</span><span class="k">   |</span>
</span></code></pre></td></tr></table></div></figure>


<p>既にFabricateされた&#8221;widget&#8221;と&#8221;wockets&#8221;を関連付ける。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="k">And </span><span class="nf">that wocket belongs to that widget</span>
</span></code></pre></td></tr></table></div></figure>


<p>データベースにいくつのオブジェクトが保持されているか検証する。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="k">Then </span><span class="nf">I should see </span><span class="s">1</span><span class="nf"> widget in the database</span>
</span></code></pre></td></tr></table></div></figure>


<p>オブジェクトの中身も検証できる。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="k">Then </span><span class="nf">I should see the following widget in the database</span>
</span><span class='line'><span class="k">  |</span><span class="s"> name</span><span class="k">  |</span><span class="s"> Sprocket</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">  |</span><span class="s"> gears</span><span class="k"> |</span><span class="s"> 4</span><span class="k">        |</span><span class="nf"></span>
</span><span class='line'><span class="k">  |</span><span class="s"> color</span><span class="k"> |</span><span class="s"> green</span><span class="k">    |</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Transforms</h3>

<p>cucumberのステップでテーブルを変換できる。縦横のテーブルでカラムの値を再配置できる。
spec/fabricatorsフォルダにおいておけば、何とでも設定しておける。</p>

<p>例として、全てのフィールドの&#8221;company&#8221;に変換の定義をする。lambda には返り値の属性をセットしたい文字列を置く。
その結果、&#8221;company&#8221;のインスタンスオブジェクトが生成される。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabrication</span><span class="o">::</span><span class="no">Transform</span><span class="o">.</span><span class="n">define</span><span class="p">(</span><span class="ss">:company</span><span class="p">,</span> <span class="nb">lambda</span><span class="p">{</span> <span class="o">|</span><span class="n">company_name</span><span class="o">|</span> <span class="no">Company</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="n">company_name</span><span class="p">)</span><span class="o">.</span><span class="n">first</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="k">Scenario:</span><span class="nf"> a single object with transform to apply</span>
</span><span class='line'><span class="k">  Given </span><span class="nf">the following company:</span>
</span><span class='line'><span class="k">    |</span><span class="s"> name</span><span class="k"> |</span><span class="s"> Widgets Inc</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="nf">  </span><span class="k">Given </span><span class="nf">the following division:</span>
</span><span class='line'><span class="k">    |</span><span class="s"> name</span><span class="k">    |</span><span class="s"> Southwest</span><span class="k">   |</span><span class="nf"></span>
</span><span class='line'><span class="k">    |</span><span class="s"> company</span><span class="k"> |</span><span class="s"> Widgets Inc</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="nf">  </span><span class="k">Then </span><span class="nf">that division should reference that company</span>
</span><span class='line'>
</span><span class='line'><span class="k">Scenario:</span><span class="nf"> multiple objects with transform to apply</span>
</span><span class='line'><span class="k">  Given </span><span class="nf">the following company:</span>
</span><span class='line'><span class="k">    |</span><span class="s"> name</span><span class="k"> |</span><span class="s"> Widgets Inc</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="nf">  </span><span class="k">Given </span><span class="nf">the following divisions:</span>
</span><span class='line'><span class="k">    |</span><span class="s"> name</span><span class="k">      |</span><span class="s"> company</span><span class="k">     |</span><span class="nf"></span>
</span><span class='line'><span class="k">    |</span><span class="s"> Southwest</span><span class="k"> |</span><span class="s"> Widgets Inc</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">    |</span><span class="s"> North</span><span class="k">     |</span><span class="s"> Widgets Inc</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="nf">  </span><span class="k">Then </span><span class="nf">they should reference that company</span>
</span></code></pre></td></tr></table></div></figure>


<p>divisions を生成したときに、lambdaによって&#8221;company&#8221;オブジェクトに渡されている。</p>

<p>特定のモデルのスコープにだけ適用したい場合は、<strong>only_for</strong>を使う。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabrication</span><span class="o">::</span><span class="no">Transform</span><span class="o">.</span><span class="n">only_for</span><span class="p">(</span><span class="ss">:division</span><span class="p">,</span> <span class="ss">:company</span><span class="p">,</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">company_name</span><span class="o">|</span> <span class="no">Company</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="n">company_name</span><span class="p">)</span><span class="o">.</span><span class="n">first</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fabrication]]></title>
    <link href="http://web-k.github.com/blog/2012/10/04/fabrication/"/>
    <updated>2012-10-04T12:02:00+09:00</updated>
    <id>http://web-k.github.com/blog/2012/10/04/fabrication</id>
    <content type="html"><![CDATA[<p>ここでは、<a href="http://www.fabricationgem.org/">Fabrication</a> のサイトを日本語に直して、自己解釈して補完しながら説明していきます。</p>

<h2>Fabricationとは</h2>

<p>これはオブジェクト生成ライブラリで、
オブジェクトの概略だけを定義し、素早くオブジェクトを使うことができるものである。
サポートしているオブジェクトタイプは以下のものなどがある。</p>

<ul>
<li>ActiveRecord Models</li>
<li>Mongoid Documents</li>
<li>Sequel Models</li>
<li>DataMapper Resources</li>
<li>・・・</li>
</ul>


<h2>設定</h2>

<p>Gemfile に Fabrication を記載し、bundle install すれば使える</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;fabrication&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>デフォルトでは以下にFabrication関連のソースを置くと、自動ロードされる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spec/fabricators/**/*fabricator.rb
</span><span class='line'>test/fabricators/**/*fabricator.rb</span></code></pre></td></tr></table></div></figure>


<p>設定を変更したい場合は以下のように、Fabrication.configureで設定変更できる。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabrication</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">fabricator_path</span> <span class="o">=</span> <span class="s1">&#39;data/fabricators&#39;</span> <span class="c1">#Fabrication関連の定義を置くパス</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">path_prefix</span> <span class="o">=</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span> <span class="c1">#ファイルシステムへの許可範囲</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>引数</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="no">Fabricator</span><span class="p">(</span><span class="ss">:person</span><span class="p">)</span> <span class="c1">#引数がFabricatiorオブジェクトになる。クラス名のシンボルである必要がある</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabricator</span><span class="p">(</span><span class="ss">:adult</span><span class="p">,</span> <span class="n">from</span><span class="p">:</span> <span class="ss">:person</span><span class="p">)</span> <span class="c1">#from: :symbolized_class_nameのクラス名を変えて:adultというFabricatiorオブジェクトが定義できる</span>
</span></code></pre></td></tr></table></div></figure>


<h2>属性</h2>

<p>Fabricator ブロックには変数が必要ではないが、1つ提供される。属性リスト作成時に、宣言もされる。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabricator</span><span class="p">(</span><span class="ss">:person</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s1">&#39;Greg Graffin&#39;</span>
</span><span class='line'>  <span class="n">profession</span> <span class="s1">&#39;Professor/Musician&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>属性には変数を渡すことができる</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabricator</span><span class="p">(</span><span class="ss">:person</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="p">{</span> <span class="no">Faker</span><span class="o">::</span><span class="no">Name</span><span class="o">.</span><span class="n">name</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">profession</span> <span class="p">{</span> <span class="sx">%w(Butcher Baker Candlestick\ Maker)</span><span class="o">.</span><span class="n">sample</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>属性は処理順に宣言され、上記フィールドのブロック変数を用いることができる。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabricator</span><span class="p">(</span><span class="ss">:person</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span> <span class="p">{</span> <span class="no">Faker</span><span class="o">::</span><span class="no">Name</span><span class="o">.</span><span class="n">name</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">email</span> <span class="p">{</span> <span class="o">|</span><span class="n">attrs</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">attrs</span><span class="o">[</span><span class="ss">:name</span><span class="o">].</span><span class="n">parameterize</span><span class="si">}</span><span class="s2">@example.com&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>予約語</h2>

<p>予約語名をブロック変数と一緒に使うことで属性として参照できる</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabricator</span><span class="p">(</span><span class="ss">:person</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="n">f</span><span class="o">.</span><span class="n">alias</span> <span class="s1">&#39;James Bond&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>関連</h2>

<p>他のFabricatorに関連付ける場合は、属性名を書くだけでいい。
これで、「<strong>belongs_to</strong>」の関連を表現できる。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabricator</span><span class="p">(</span><span class="ss">:person</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">vehicle</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="err">↑↓等価</span>
</span><span class='line'><span class="no">Fabricator</span><span class="p">(</span><span class="ss">:person</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">vehicle</span> <span class="p">{</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:vehicle</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabricator</span><span class="p">(</span><span class="ss">:person</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">ride</span><span class="p">(</span><span class="n">fabricator</span><span class="p">:</span> <span class="ss">:vehicle</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="err">↑↓等価</span>
</span><span class='line'><span class="no">Fabricator</span><span class="p">(</span><span class="ss">:person</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">ride</span> <span class="p">{</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:vehicle</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>countパラメータを使うことで、配列オブジェクトを生成できる。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabricator</span><span class="p">(</span><span class="ss">:person</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">open_souce_projects</span><span class="p">(</span><span class="n">count</span><span class="p">:</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="n">children</span><span class="p">(</span><span class="n">count</span><span class="p">:</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">attrs</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:person</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Kid </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>継承</h2>

<p>他の Fabricators から属性を継承する場合は、「<strong>:from</strong>」 を使う</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabricator</span><span class="p">(</span><span class="ss">:llc</span><span class="p">,</span> <span class="n">from</span><span class="p">:</span> <span class="ss">:company</span><span class="p">)</span> <span class="k">do</span> <span class="c1">#クラスの属性とその値を全て継承する</span>
</span><span class='line'>  <span class="n">type</span> <span class="s2">&quot;LLC&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Fabricator</span><span class="p">(</span><span class="ss">:llc</span><span class="p">,</span> <span class="n">class_name</span><span class="p">:</span> <span class="ss">:company</span><span class="p">)</span> <span class="k">do</span> <span class="c1"># class_name: でクラスの属性のみを継承する</span>
</span><span class='line'>  <span class="n">type</span> <span class="s2">&quot;LLC&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>初期化</h2>

<p>オブジェクトの初期化を通常の方法でしてほしくないときは、
<strong>initialize_with</strong>を以下のようにオーバーライドすればよい。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabricator</span><span class="p">(</span><span class="ss">:car</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">initialize_with</span> <span class="p">{</span> <span class="no">Manufacturer</span><span class="o">.</span><span class="n">produce</span><span class="p">(</span><span class="ss">:new_car</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">color</span> <span class="s1">&#39;red&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>コールバック</h2>

<p>Fabricationのビルドにフックするには、<strong>after_build</strong>、<strong>after_create</strong> を使う。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabricator</span><span class="p">(</span><span class="ss">:place</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">after_build</span> <span class="p">{</span> <span class="o">|</span><span class="n">place</span><span class="o">|</span> <span class="n">place</span><span class="o">.</span><span class="n">geolocate!</span> <span class="p">}</span> <span class="c1">#ビルド後=保存する前</span>
</span><span class='line'>  <span class="n">after_create</span> <span class="p">{</span> <span class="o">|</span><span class="n">place</span><span class="o">|</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:restaurant</span><span class="p">,</span> <span class="n">place</span><span class="p">:</span> <span class="n">place</span><span class="p">)</span> <span class="p">}</span> <span class="c1">#保存した後</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>オブジェクトに引数を与えたときのコンストラクタでコールバックするときは、<strong>on_init</strong>を使う。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabricator</span><span class="p">(</span><span class="ss">:location</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">on_init</span> <span class="p">{</span> <span class="n">init_with</span><span class="p">(</span><span class="mi">30</span><span class="o">.</span><span class="mi">284167</span><span class="p">,</span> <span class="o">-</span><span class="mi">81</span><span class="o">.</span><span class="mi">396111</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>コールバックはスタックになっているので、並列にFabricatorを宣言できるし、継承しても大丈夫。</p>

<h2>エイリアス</h2>

<p>Fabricatior呼び出し時に<strong>:aliases</strong>オプションをつけるとエイリアスが付けれる。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabricator</span><span class="p">(</span><span class="ss">:thingy</span><span class="p">,</span> <span class="n">aliases</span><span class="p">:</span> <span class="o">[</span><span class="ss">:widget</span><span class="p">,</span> <span class="ss">:wocket</span><span class="o">]</span><span class="p">)</span> <span class="c1">#Fabricateを :thingy,:widget, :wocketどれでも呼び出せる</span>
</span></code></pre></td></tr></table></div></figure>


<h2>一時属性</h2>

<p>Fabricator内で一時属性を変数として持てるが、クラス生成時にはセットされない。
一時属性は、クラスが生成されるまでの間は普通の属性と同じように扱えるが、生成時に取り除かれる。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabricator</span><span class="p">(</span><span class="ss">:city</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">transient</span> <span class="ss">:asian</span>
</span><span class='line'>  <span class="nb">name</span> <span class="p">{</span> <span class="o">|</span><span class="n">attrs</span><span class="o">|</span> <span class="n">attrs</span><span class="o">[</span><span class="ss">:asian</span><span class="o">]</span> <span class="p">?</span> <span class="s2">&quot;Tokyo&quot;</span> <span class="p">:</span> <span class="s2">&quot;Stockholm&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">Fabricate</span><span class="p">(</span><span class="ss">:city</span><span class="p">,</span> <span class="n">asian</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; &lt;City name: &#39;Tokyo&#39;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Fabricator</span><span class="p">(</span><span class="ss">:the_count</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">transient</span> <span class="ss">:one</span><span class="p">,</span> <span class="ss">:two</span><span class="p">,</span> <span class="ss">:three</span> <span class="c1">#複数定義可</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>リロード</h2>

<p>Fabricationがロードされた状態にリセットする</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabrication</span><span class="o">.</span><span class="n">clear_definitions</span>
</span></code></pre></td></tr></table></div></figure>


<h2>基本</h2>

<p>Fabricateオブジェクトを作成する簡単な方法は、クラス名を渡すだけでいい。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabricate</span><span class="p">(</span><span class="ss">:person</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、PersonのインスタンスがFabricatorとして定義される。
Fabricator作成時に、引数としてハッシュを渡せば、属性の追加や、上書きができる。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabricate</span><span class="p">(</span><span class="ss">:person</span><span class="p">,</span> <span class="n">first_name</span><span class="p">:</span> <span class="s2">&quot;Corbin&quot;</span><span class="p">,</span> <span class="n">last_name</span><span class="p">:</span> <span class="s2">&quot;Dallas&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Fabricating With Blocks</h2>

<p>Fabricateのブロックの引数にハッシュ値を渡せば、オブジェクト生成時に定義され利用できる。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabricate</span><span class="p">(</span><span class="ss">:person</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Franky Four Fingers&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">addiction</span> <span class="s2">&quot;Gambling&quot;</span>
</span><span class='line'>  <span class="n">fingers</span><span class="p">(</span><span class="n">count</span><span class="p">:</span> <span class="mi">9</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ビルド</h2>

<p>データベースにオブジェクトを持続させたくないときは Fabricate.build を使う。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabricate</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="ss">:person</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>下記のように、Fabricate.build内でFabricateが呼ばれていてもオブジェクトは持続せず、buildのときの動作と同じになる。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabricate</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="ss">:person</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">cars</span> <span class="p">{</span> <span class="mi">2</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:car</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>属性のハッシュ</h2>

<p>オブジェクトを生成せずに、属性だけを生成してハッシュで返したい場合は以下のようにする。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabricate</span><span class="o">.</span><span class="n">attributes_for</span><span class="p">(</span><span class="ss">:company</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Sequences</h2>

<p>Sequencesはそのプロセスにおいての、ユニークな連続した数値が得られる。
Sequencesは指定がなければ、0からはじまる。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fabricate</span><span class="o">.</span><span class="n">sequence</span> <span class="c1">#実行するたびにインクリメントされていく</span>
</span><span class='line'><span class="c1"># =&gt; 0 #1回目</span>
</span><span class='line'><span class="c1"># =&gt; 1 #2回目</span>
</span><span class='line'><span class="c1"># =&gt; 2 #3回目</span>
</span><span class='line'>
</span><span class='line'><span class="no">Fabricate</span><span class="o">.</span><span class="n">sequence</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span> <span class="c1">#引数を渡せば独自の数値でインクリメントされる</span>
</span><span class='line'><span class="c1"># =&gt; 0</span>
</span><span class='line'><span class="c1"># =&gt; 1</span>
</span><span class='line'><span class="c1"># =&gt; 2</span>
</span><span class='line'>
</span><span class='line'><span class="no">Fabricate</span><span class="o">.</span><span class="n">sequence</span><span class="p">(</span><span class="ss">:number</span><span class="p">,</span> <span class="mi">99</span><span class="p">)</span> <span class="c1">#第2引数の数値は開始の数値</span>
</span><span class='line'><span class="c1"># =&gt; 99</span>
</span><span class='line'><span class="c1"># =&gt; 100</span>
</span><span class='line'><span class="c1"># =&gt; 101</span>
</span><span class='line'>
</span><span class='line'><span class="no">Fabricate</span><span class="o">.</span><span class="n">sequence</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="s2">&quot;Name </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span> <span class="c1">#ブロックで渡してもインクリメントされる</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Name 0&quot;</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Name 1&quot;</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Name 2&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Fabricate</span><span class="p">(</span><span class="ss">:person</span><span class="p">)</span> <span class="k">do</span> <span class="c1">#例</span>
</span><span class='line'>  <span class="n">ssn</span> <span class="p">{</span> <span class="n">sequence</span><span class="p">(</span><span class="ss">:ssn</span><span class="p">,</span> <span class="mi">111111111</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">email</span> <span class="p">{</span> <span class="n">sequence</span><span class="p">(</span><span class="ss">:email</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="s2">&quot;user</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">@example.com&quot;</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># =&gt; &lt;Person ssn: 111111111, email: &quot;user0@example.com&quot;&gt;</span>
</span><span class='line'><span class="c1"># =&gt; &lt;Person ssn: 111111112, email: &quot;user1@example.com&quot;&gt;</span>
</span><span class='line'><span class="c1"># =&gt; &lt;Person ssn: 111111113, email: &quot;user2@example.com&quot;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Rails 3</h1>

<p>Rails 3でFabricatorsをモデル生成時に一緒に生成したい場合は、config/application.rb に設定を書く。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># rspecの場合</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">generators</span> <span class="k">do</span> <span class="o">|</span><span class="n">g</span><span class="o">|</span>
</span><span class='line'>  <span class="n">g</span><span class="o">.</span><span class="n">test_framework</span>      <span class="ss">:rspec</span><span class="p">,</span> <span class="n">fixture</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">g</span><span class="o">.</span><span class="n">fixture_replacement</span> <span class="ss">:fabrication</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># test/unitの場合</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">generators</span> <span class="k">do</span> <span class="o">|</span><span class="n">g</span><span class="o">|</span>
</span><span class='line'>  <span class="n">g</span><span class="o">.</span><span class="n">test_framework</span>      <span class="ss">:test_unit</span><span class="p">,</span> <span class="n">fixture_replacement</span><span class="p">:</span> <span class="ss">:fabrication</span>
</span><span class='line'>  <span class="n">g</span><span class="o">.</span><span class="n">fixture_replacement</span> <span class="ss">:fabrication</span><span class="p">,</span> <span class="n">dir</span><span class="p">:</span> <span class="s2">&quot;test/fabricators&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># minitestの場合</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">generators</span> <span class="k">do</span> <span class="o">|</span><span class="n">g</span><span class="o">|</span>
</span><span class='line'>  <span class="n">g</span><span class="o">.</span><span class="n">test_framework</span>      <span class="ss">:mini_test</span><span class="p">,</span> <span class="n">fixture_replacement</span><span class="p">:</span> <span class="ss">:fabrication</span>
</span><span class='line'>  <span class="n">g</span><span class="o">.</span><span class="n">fixture_replacement</span> <span class="ss">:fabrication</span><span class="p">,</span> <span class="n">dir</span><span class="p">:</span> <span class="s2">&quot;test/fabricators&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記設定後、下記コマンドでFabricationのファイルができる。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rails</span> <span class="n">generate</span> <span class="n">model</span> <span class="n">widget</span> <span class="c1">#コマンド</span>
</span><span class='line'><span class="n">spec</span><span class="o">/</span><span class="n">fabricators</span><span class="o">/</span><span class="n">widget_fabricator</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'> <span class="no">Fabricator</span><span class="p">(</span><span class="ss">:widget</span><span class="p">)</span> <span class="k">do</span> <span class="c1">#中身</span>
</span><span class='line'> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参考リンク</h3>

<ul>
<li><a href="http://www.fabricationgem.org/">Fabrication:本家</a></li>
<li><a href="http://d.hatena.ne.jp/hibariya/20101010/1286713523">Fabricationを使ってみた - のどをRubyでいっぱいにして</a></li>
<li><a href="http://aligach.net/diary/20101220.html">あーありがち - 素の Ruby 環境で Fabrication</a></li>
<li><a href="http://www.slideshare.net/KenichiTachibana/fabrication-10499288">Fabrication:SlideShare</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpecとCapybaraのマッチャ比較]]></title>
    <link href="http://web-k.github.com/blog/2012/10/03/compare-matchers/"/>
    <updated>2012-10-03T14:36:00+09:00</updated>
    <id>http://web-k.github.com/blog/2012/10/03/compare-matchers</id>
    <content type="html"><![CDATA[<p>Ruby on RailsでSpecを書く時に、RSpecのマッチャなのかCapybaraのマッチャなのか分からなくなったのでメモ</p>

<h3>RSpecのマッチャ</h3>

<p>RSpecのマッチャには、「演算子マッチャ」と「ビルトインマッチャ」があり、「should」や「should_not」と組み合わせて使用します。
(shouldとshould_notはRSpecがObjectを拡張して作ったメソッド)</p>

<p>マッチャとして使用できる演算子は、「&lt;」、「&lt;=」、「==」、「===」、「=~」、「>」、「>=」の７種類。</p>

<p>使うときは以下のようにして記載します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">should</span> <span class="o">&lt;</span> <span class="mi">2</span>
</span><span class='line'><span class="s2">&quot;apple&quot;</span><span class="o">.</span><span class="n">should_not</span> <span class="o">=~</span> <span class="sr">/orange/</span>
</span></code></pre></td></tr></table></div></figure>


<p>なお、「!=」や「!~」などの否定演算子は<strong>サポートされていません</strong>。「なんとかではないこと」を記載するときはshouldの代わりにshould_notを使います。</p>

<p>ビルトインマッチャは</p>

<ul>
<li>be</li>
<li>be_a</li>
<li>be_a_kind_of</li>
<li>be_an_instance_of</li>
<li>be_close</li>
<li>be_within</li>
<li>change</li>
<li>eq</li>
<li>eql</li>
<li>equal</li>
<li>exist</li>
<li>expect</li>
<li>have</li>
<li>have_at_least</li>
<li>have_at_most</li>
<li>include</li>
<li>match</li>
<li>raise_error</li>
<li>respond_to</li>
<li>satisfy</li>
<li>throw_symbol</li>
</ul>


<p>って感じでたくさんあります。
「be_XXX」マッチャは「be_a_XXX」、「be_an_XXX」と記載しても同じ動作になります。
「have_XXX」マッチャは、RSpec の実行時には 「has_XXX?」メソッドの呼び出しとして解釈されます。これは、should と並べ たときの字面を (英語として) 自然な記述するための措置です。</p>

<p>使うときは以下のようにして記載します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;string&quot;</span><span class="o">.</span><span class="n">should</span> <span class="n">be_an_instance_of</span><span class="p">(</span><span class="nb">String</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">should</span> <span class="n">be_a_kind_of</span><span class="p">(</span><span class="no">Numeric</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_an_instance_of</span><span class="p">(</span><span class="nb">String</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>また、マッチャを独自定義して使用することも可能です。
次のように書きます。（<a href="http://rspec.rubyforge.org/rspec/1.2.9/classes/Spec/Matchers.html">公式ドキュメント</a>から引用）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Spec</span><span class="o">::</span><span class="no">Matchers</span><span class="o">.</span><span class="n">define</span> <span class="ss">:be_in_zone</span> <span class="k">do</span> <span class="o">|</span><span class="n">zone</span><span class="o">|</span>
</span><span class='line'>  <span class="n">match</span> <span class="k">do</span> <span class="o">|</span><span class="n">player</span><span class="o">|</span>
</span><span class='line'>    <span class="n">player</span><span class="o">.</span><span class="n">in_zone?</span><span class="p">(</span><span class="n">zone</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Railsで使う場合は、spec/フォルダ直下にcustom_matchers.rbを作り、</p>

<p>custom_matchers.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">CustomMatcher</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">custom_matcher</span>
</span><span class='line'>    <span class="c1">#マッチャの処理を記述 </span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>spec/spec_helper.rbを編集</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;/custom_matchers&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">include</span><span class="p">(</span><span class="no">CustomMatcher</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでマッチャとしてcustom_matcherが使えるようになります。</p>

<h3>Capybaraのマッチャ</h3>

<p>Capybaraのマッチャは、オブジェクト対してメソッドの様に記載したり、RSpecのマッチャの様に記載することができます。
形式は「has_xxx?」の形をしているものがほとんど。</p>

<ul>
<li>assert_selector</li>
<li>has_button? / has_no_button?</li>
<li>has_checked_field? / has_no_checked_field?</li>
<li>has_content? / has_no_content?</li>
<li>has_css? / has_no_css?</li>
<li>has_field? / has_no_field?</li>
<li>has_link? / has_no_link?</li>
<li>has_select? / has_no_select?</li>
<li>has_selector? / has_no_selector?</li>
<li>has_table? / has_no_table?</li>
<li>has_text? / has_no_text?</li>
<li>has_unchecked_field? / has_no_unchecked_field?</li>
<li>has_xpath? / has_no_xpath?</li>
</ul>


<p>って感じでこちらもたくさんあります。</p>

<p>使うときは以下のようにして記載します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">page</span><span class="o">.</span><span class="n">has_xpath?</span><span class="p">(</span><span class="s1">&#39;//table/tr&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">page</span><span class="o">.</span><span class="n">has_css?</span><span class="p">(</span><span class="s1">&#39;table tr.hoge&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">page</span><span class="o">.</span><span class="n">has_no_content?</span><span class="p">(</span><span class="s1">&#39;hoge&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># page.has_XXX? は true/false を返すだけなので、テスト結果を得たいときは、</span>
</span><span class='line'><span class="c1"># assert page.has_xpath?(&#39;//table/tr&#39;)</span>
</span><span class='line'><span class="c1"># というようにassertを付けて記載します。</span>
</span></code></pre></td></tr></table></div></figure>


<p>また、RSpecのマッチャの様に記載するときは「has_XXX?」を「have_XXX」に直して以下のようにします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">page</span><span class="o">.</span><span class="n">should</span> <span class="n">have_xpath</span><span class="p">(</span><span class="s1">&#39;//table/tr&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">page</span><span class="o">.</span><span class="n">should</span> <span class="n">have_css</span><span class="p">(</span><span class="s1">&#39;table tr.hoge&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">page</span><span class="o">.</span><span class="n">should</span> <span class="n">have_no_content</span><span class="p">(</span><span class="s1">&#39;hoge&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>このとき、page.<strong>should</strong> have_no_XXX(&#8216;value&#8217;)をpage.<strong>should_not</strong> have_XXX(&#8216;value&#8217;)とは書かないほうがよいです。
理由はAjaxの待ち時間を考慮するためです。
Capybaraには非同期のJavascriptを扱う時に、まだページに存在していないされていないDOM要素を一定の待ち時間が経過したら再度探すという振る舞いがあります。
shouldを用いたときにその振る舞いは発揮されますが、should_notを用いたときはその振る舞いは発揮されず１回目の捜査で終了します。
待ち時間は次のように変更することができます。（デフォルトは2秒です。）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">default_wait_time</span> <span class="o">=</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参考リンク</h3>

<ul>
<li><a href="http://jp.rubyist.net/magazine/?0021-Rspec">Rubyist Magazine - スはスペックのス 【第 1 回】 RSpec の概要と、RSpec on Rails (モデル編)</a></li>
<li><a href="http://blog.digital-squad.net/article/194513209.html">rspecでカスタムマッチャの設定｜WEBデザイン Tips</a></li>
<li><a href="http://d.hatena.ne.jp/willnet/20110704/1309782442">Capybara の README 意訳 - おもしろWEBサービス開発日記</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
