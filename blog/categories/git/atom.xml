<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | web-k.log]]></title>
  <link href="http://web-k.github.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://web-k.github.com/"/>
  <updated>2013-04-06T17:16:08+09:00</updated>
  <id>http://web-k.github.com/</id>
  <author>
    <name><![CDATA[Team web-k]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gitコマンドまとめ(2)～rebase/cherry-pick/revert/etc...～]]></title>
    <link href="http://web-k.github.com/blog/2013/03/18/git2/"/>
    <updated>2013-03-18T22:10:00+09:00</updated>
    <id>http://web-k.github.com/blog/2013/03/18/git2</id>
    <content type="html"><![CDATA[<p><a href="/blog/2012/11/08/git">前回のGitコマンドまとめ</a>はローカルリポジトリ単独での利用やgithubで自分のリモートリポジトリだけで利用する場合等でもよく利用できそうなコマンドをまとめました。今回は複数人で平行開発する場合等でマスターリモートリポジトリを共有している際等に頻繁に利用するgit rebaseを中心に、使えそうなコマンドを紹介していきます。</p>

<h3>コミット(ブランチ)を編集する: git rebase</h3>

<p>複数人で利用するリモートブランチを扱う場合、masterブランチのみで開発を行うことは実質不可能となり、topicブランチやfeatureブランチ等、何かしらブランチを作成して品質を確保した上でメインブランチにPull Requestを行って反映するようなやり方をすることが多くなります。その際にメインブランチではコミットが頻繁に行われたりすると派生ブランチは古いバージョンのソースからブランチが切られていたりして、最新コミットに追従出来ていない状態においちることがあります。</p>

<p>Gitには平行開発を安全に、派生ブランチを健全に運用していくためのいくつかのコマンドがあり、その代表の1つとしてrebaseがあります。rebaseは単純に説明すると「既にコミット済みのものを再編集する」ものですが、最新コミットへのブランチの追従やコメントの付け替え、複数のコミットをまとめたり出来ます。</p>

<p>細かい使い方、ブランチの順番等を思い出す時はヘルプを参照するとブランチの図入りで例が載っているのでおすすめです：</p>

<p><code>
$ git help rebase
</code></p>

<p>派生したブランチ(topic)にて開発していた場合に、メインブランチ(master)の開発が進み最新コミットが入り込んだ場合に追従し、最新コミットからのブランチから枝分かれするよう追従させる場合は以下を利用します</p>

<p><code>
$ git rebase master  # topicブランチにてcheckoutしている状態でrebaseする
</code></p>

<p>また、rebaseではありませんが、既にtopicブランチ自体も複数人で共有している場合等、ブランチにあるコミットを変更したくない(できない)場合にはmergeすることでも追従可能なので、ケースバイケースで使い分けます</p>

<p><code>
$ git merge master   # 既存のコミットに追加する形でtopicブランチにマージコミットができる
</code></p>

<p>rebaseを行うと枝元の古いコミットから順に最新コミットへの追従が行われていきますが、途中のコミットにてコンフリクトが発生する場合があります。コンフリクトが発生したコミットはリベース中の状態(無名ブランチ)となってコンフリクトの解消を手動で行うようにrebaseが中断します。そのときの対応コマンドは以下になります：</p>

<p><code>
$ git rebase --continue # コンフリクトを手動で編集して解消出来た場合に修正を反映してコミットし、rebaseを再開する
$ git rebase --abort    # コンフリクト解消を止めて、rebase前の元の状態に戻す
$ git rebase --skip     # コンフリクトしたコミットを無視してrebaseを再開する
</code></p>

<p>ブランチの派生元を別ブランチに差し替えたい場合は--ontoオプションを利用します</p>

<p><code>
$ git rebase --onto master next topic # nextブランチから派生しているtopicブランチをmasterブランチの最新コミットから派生するブランチにrebaseする
</code></p>

<p>過去のコミット編集を個別に行う場合は-iオプションを使います</p>

<p><code>
$ git rebase -i HEAD~3 # チェックアウト中の過去3コミットについて個別に操作内容を指定する
</code></p>

<p>コミットログと操作内容が書かれた文章がエディタで開かれる(最初はすべてpickが指定)ので、操作したいコミットを編集します。以下の操作がおこなえます</p>

<p><code>
pick         コミット内容は編集せずそのまま反映
reword       コミットメッセージだけ編集する
edit         コミットを編集する
squash       一つ前のコミットと統合する(コミットログは残る)
fixup        一つ前のコミットと統合する(コミットログは統合先のもののみ残り、fixupコミットログは破棄される)
行を削除      コミットを削除する
行を入れ替え  コミット順を入れ替える
</code></p>

<p>操作内容が決まったら編集を保存し、エディタを閉じるとrebaseが操作リストにしたがって行われます。</p>

<h3>コミットした内容を取り消す: git revert</h3>

<p>git resetを用いてもコミット内容は取り消せますが、痕跡も残らない強力なものなので、内容を取り消したという履歴を残すバージョン管理システムとして自然な取り消しを行いたい場合はrevertを用います</p>

<p><code>
$ get revert HEAD~5                        # HEADから5つ前のコミットを取り消す
$ git revert ':/Commit Comment'            # 「Commit Comment」というコミットログのコミットを取り消す
$ git revert ':/Commit Comment' --no-edit  # 「Revert 'Commit Comment'」という定形文をコミットログに利用する
$ git revert -n HEAD~4                     # HEADから4つ前のコミットを取り消すが、コミットはせずに編集を続ける
</code></p>

<h3>特定のコミットをブランチに取り込む: git cherry-pick</h3>

<p>pull-requestの一部の修正のみ取り込みたい場合や他のブランチから一部必要な機能が含まれているコミットのみを取り込みたい場合にcherry-pickを用います</p>

<p><code>
$ git cherry-pick daf980923     # コミットdaf980923をチェックアウトブランチに取り込む
$ git cherry-pick -x jfa0032a2  # コミットjfa0032a2を元のコミット情報をコミットログに残した状態でブランチに取り込む
</code></p>

<h3>バグが入り込んだ位置を特定する: git bisect</h3>

<p>コミットリストの二分検索により確認を行っていき効率的にバグ混入箇所を特定します。</p>

<p><code>
$ git bisect start           # バグ特定開始
$ git bisect bad             # バグが混入しているコミットを指定
$ git bisect good daf980923  # コミットdaf980923はビルド(テスト)成功していることを知らせる
</code></p>

<p>上記のコマンドを実行すると二分検索が始まり、中間のコミットがチェックアウトされる。後はビルド(テスト)を行って、</p>

<p><code>
$ git bisect good  # ビルド(テスト)成功
$ git bisect bad   # ビルド(テスト)失敗
</code></p>

<p>を繰り替えして最後に失敗したコミットがバグ混入箇所と特定できる。</p>

<p><code>
$ git bisect reset  # バグ特定を終了し、元に戻す
</code></p>

<p>他にもsubmoduleコマンド等色々有るが利用ケースが今のところないので割愛します。新しい有用なコマンド等が見つかった場合に続きを書きます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitでよく使う21コマンドまとめ]]></title>
    <link href="http://web-k.github.com/blog/2012/11/08/git/"/>
    <updated>2012-11-08T00:43:00+09:00</updated>
    <id>http://web-k.github.com/blog/2012/11/08/git</id>
    <content type="html"><![CDATA[<p>よく使うgitコマンドをリストアップしてみる</p>

<h3>リポジトリ作成: git init</h3>

<p>ローカルリポジトリを作成するにはリポジトリ名を指定する。</p>

<p><code>
$ git init repo
Initialized empty Git repository in /Users/user/repo/.git/
</code></p>

<h3>リポジトリの設定: git config</h3>

<p>リポジトリ単位の設定は.git/config、ログインユーザ単位の設定は~/.gitconfigに、システム単位は/etc/gitconfigに格納されている。それぞれ、</p>

<p><code>
$ git config キー 値           # リポジトリ単位
$ git config --global キー 値  # ログインユーザー単位
$ git config --system キー 値  # システム単位
</code></p>

<p>にて値を設定出来る。各値はシステム→ログインユーザー→リポジトリ単位の順で読み込まれ、後から読み込んだほうが優先される。現在の設定は</p>

<p><code>
$ git config --list
</code></p>

<p>で参照可能。良く設定するキーは</p>

<p><code>
$ git config user.name    # コミットユーザー名
$ git config user.email   # コミットE-mail
$ git config alias.*      # gitコマンドAlias
</code></p>

<h3>ファイルをインデックスに登録: git add</h3>

<p>gitの場合、ファイルを追加・更新しただけではまだコミット候補ではなく、インデックスに登録する必要がある。</p>

<p><code>
$ git add .     # カレントフォルダ以降のファイルをすべて登録
$ git add path  # ファイル・フォルダの登録
</code></p>

<h3>リポジトリの状態を確認: git status</h3>

<p>ワーキングツリー・インデックスの状態を確認する。リポジトリとの現在のファイルの変更・修正状況、コミット候補としてインデックスに登録されているか確認出来る。</p>

<p>```
$ git status</p>

<h1>On branch source</h1>

<h1>Changes not staged for commit:</h1>

<h1>(use "git add <file>..." to update what will be committed)</h1>

<h1>(use "git checkout -- <file>..." to discard changes in working directory)</h1>

<p>#</p>

<h1>modified:   .gitignore</h1>

<p>#</p>

<h1>Untracked files:</h1>

<h1>(use "git add <file>..." to include in what will be committed)</h1>

<p>#</p>

<h1>source/_posts/2012-11-07-git.markdown</h1>

<p>no changes added to commit (use "git add" and/or "git commit -a")</p>

<p>$ git status -s  # status簡易版
 M .gitignore
 ?? source/_posts/2012-11-07-git.markdown
```</p>

<h3>差分を確認する: git diff</h3>

<p>リポジトリとの差分が確認出来る。</p>

<p>```
$ git diff  # ワーキングツリーの差分
diff --git a/.gitignore b/.gitignore
index 4bba145..b4bbc86 100644
--- a/.gitignore
+++ b/.gitignore
@@ -11,4 +11,5 @@ source/_stash
source/stylesheets/screen.css
vendor
node_modules
-nbproject/<em>
\ No newline at end of file
+nbproject/</em>
+*.swp</p>

<p>$ git diff HEAD  # インデックスとリポジトリ最新との差分
$ git diff master  # masterブランチとの差分
$ git diff master develop  # masterブランチとdevelopブランチとの差分
```</p>

<h3>コミットログの表示: git log</h3>

<p><code>
$ git log  # 現在のブランチのログ表示
$ git log -p  # 現在のブランチのdiffも含めてログ表示
$ git log -2  # 最新2つのコミットログを表示
$ git log --oneline --graph  # ログをコミット毎に1行フォーマットで表示し、コミットツリーを表示する
</code></p>

<h3>ディレクトリ・ファイルの移動: git mv</h3>

<p>コミット済みのファイルを移動・リネームする。コマンド実行するとコミット候補としてインデックスに登録される</p>

<p><code>
$ git mv file1 file2  # file1をfile2にリネームする
$ git mv dir1/file dir2/file  # fileをdir1からdir2に移動する
</code></p>

<h3>ディレクトリ・ファイルの削除: git rm</h3>

<p>コミット済み、またはインデックスに登録済みのファイルを削除する</p>

<p><code>
$ git rm file  # fileを削除する
</code></p>

<p>git rmをオプション無しで実行するとワーキングツリーからファイルが削除されるので、新規追加登録したファイルをインデックスから解除してファイルをワーキングツリーに残しておきたい場合は--cachedを使う</p>

<p>```
$ git add file
$ git rm --cached file
rm 'file'
$ git status</p>

<h1>On branch master</h1>

<p>#</p>

<h1>Initial commit</h1>

<p>#</p>

<h1>Untracked files:</h1>

<h1>(use "git add <file>..." to include in what will be committed)</h1>

<p>#</p>

<h1>file</h1>

<p>```</p>

<h3>コミットする: git commit</h3>

<p><code>
$ git commit  # git addしておいたファイルのコミット。エディタが立ち上がってコメントを入力して保存するとコミットされる
$ git commit -m "コメント"  # コメントを指定してコミット
$ git commit -a  # すべての変更をコミット。ただし、新規ファイルは追加されない。明示的にgit addする必要がある
</code></p>

<h3>直前のコミットを変更する: git commit --amend</h3>

<p>--amendオプションを指定すると直前のコミットを追加修正したインデックス登録の差分を含めて差し替えることが出来る</p>

<p><code>
$ git commit --amend  # (インデックス登録が無ければ)直前のコミットコメントを変更する
</code></p>

<p>インデックス登録してある差分を含めて直前のコミットを変更する</p>

<p><code>
$ git add file  # fileをインデックスに追加
$ git commit --amend  # addしたfileと直前のコミットをマージして差し替える
</code></p>

<h3>ローカルリポジトリ、インデックスを元に戻す: git reset</h3>

<p><code>
$ git reset --hard commit_hash  # 指定したコミットにローカルリポジトリ、インデックスを完全に戻す。コミットしていない状態に戻り無かったことになる
$ git reset --soft HEAD~  # 1つ前のコミットに戻す。ワーキングツリー・インデックスファイルは影響しない
$ git reset --mixed HEAD~  # 1つ前のコミットにインデックス・リポジトリを戻す。ワーキングツリーには影響しない
</code></p>

<h3>grepする / git grep</h3>

<p>インデックスやワーキングツリーに対して検索する</p>

<p><code>
$ git grep Text  # Textという文字列を検索する
</code></p>

<h3>コミット内容の表示: git show</h3>

<p><code>
$ git show commit_hash  # コミット内容表示。差分も参照出来る
</code></p>

<h3>リモートリポジトリをローカルにコピー: git clone</h3>

<p><code>
$ git clone git-uri  # リモートリポジトリをコピー。フォルダ名はname.gitだったらnameになる。リモートリポジトリ名はoriginになる。
$ git clone git-uri dir  # dirフォルダ名でリモートリポジトリをコピー
$ git clone git-uri -o name  # リモートリポジトリ名をnameでコピー
</code></p>

<h3>リモートリポジトリの管理: git remote</h3>

<p><code>
$ git remote  # 登録されているリポジトリ名の表示
$ git remote -v  # リポジトリ名とURIの表示
$ git remote add name git-uri  # リポジトリ名「name」にてgit-uriリモートリポジトリの登録
$ git remote show origin  # originリモートリポジトリの詳細情報表示
$ git remote update  # リモートリポジトリの更新。fetchでも済みそう
$ git remote rm devel  # リモートリポジトリdevelの登録解除
$ git remote prune  # 削除されたリモートブランチの削除
</code></p>

<h3>ブランチのマージ: git merge</h3>

<p><code>
$ git merge develop  # 現在のブランチにdevelopをマージ
$ git merge --squash develop  # 現在のブランチにdevelopのコミットを1つにまとめてマージ
</code></p>

<h3>リモートブランチにローカルブランチを送信: git push</h3>

<p><code>
$ git push origin master:master  # リモートリポジトリoriginにローカルブランチ(左のmaster)をリモートブランチ(右のmaster)に送信
$ git push origin master  # リモートリポジトリにローカルブランチmasterを送信
$ git push origin master:testing  # リモートブランチを指定
$ git push origin :testing  # リモートブランチの削除
</code></p>

<h3>ローカルリポジトリにリモートリポジトリを取り込む: git pull</h3>

<p><code>
$ git pull  # originリモートリポジトリをローカルリポジトリに取り込む
</code></p>

<p>ローカルリポジトリにコミットしていない変更がある場合、競合することがあるので、コミットしておくか、git stash saveして一旦ソースを待避してからpullすると良い。</p>

<h3>ブランチの管理: git branch</h3>

<p><code>
$ git branch  # ローカルブランチの確認。現在のブランチも確認出来る
$ git branch -r  # リモートブランチの確認
$ git branch -a  # ローカル・リモートすべてのブランチの確認
$ git branch new  # newブランチの作成
$ git branch new base  # baseブランチを起点にnewブランチを作成
$ git branch -m base rename  # baseブランチをrenameブランチに名称変更
$ git branch -d base  # baseブランチの削除。このブランチのみ存在する新しいコミットがある場合は削除されないので安全
$ git branch -D base  # baseブランチの削除。新しいコミットがあっても強制削除する
</code></p>

<h3>ブランチのスイッチ: git checkout</h3>

<p><code>
$ git checkout develop  # developブランチにスイッチ
$ git checkout --merge develop  # ワーキングツリー・インデックスで修正があるファイルとスイッチ先ブランチをマージして切り替える
$ git checkout -b new  # 現在のブランチを起点にnewブランチを作成
$ git checkout -f  # 修正したワーキングツリーの修正を元に戻す。一度戻した修正は失われるので注意
$ git checkout commit_hash file  # fileをcommit_hash時点の状態に戻す
</code></p>

<h3>未コミットの差分を一時的に保存する: git stash</h3>

<p><code>
$ git stash save  # 一時的に保存する。新規ファイルを保存する場合はgit addしておくこと
$ git stash pop  # 一時的に保存した差分を元に戻す
$ git stash list  # 保存されているキューの一覧を表示する
$ git stash drop stash@{1}  # stash@{1}を破棄。元に戻せないので注意
$ git stash clear  # 保存されているキューを全て破棄。元に戻せないので注意
</code></p>

<p>以上よく使う21コマンドを紹介した。次回はgit rebaseの使い方とgit cherry-pickなど頻繁には使わないが有用そうなコマンドを紹介する。</p>
]]></content>
  </entry>
  
</feed>
