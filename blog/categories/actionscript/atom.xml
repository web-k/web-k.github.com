<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ActionScript | web-k.log]]></title>
  <link href="http://web-k.github.com/blog/categories/actionscript/atom.xml" rel="self"/>
  <link href="http://web-k.github.com/"/>
  <updated>2012-11-12T16:08:07+09:00</updated>
  <id>http://web-k.github.com/</id>
  <author>
    <name><![CDATA[Team web-k]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ActionScript 3.0]]></title>
    <link href="http://web-k.github.com/blog/2012/11/07/actionscript/"/>
    <updated>2012-11-07T10:57:00+09:00</updated>
    <id>http://web-k.github.com/blog/2012/11/07/actionscript</id>
    <content type="html"><![CDATA[<h3>ActionScript とは</h3>

<p>ActionScript は Adobe Flash Player や Adobe AIR のランタイム環境用の開発言語です。
開発環境には Adobe Flash CS6(オーサリングツール)/Adobe Flex Builder(統合開発環境)/Adobe Flex(コマンドラインのコンパイラ)がありますが、
有償であったりコマンドラインでコンパイルしなければならないので、
ここでは無償の統合開発環境である FlashDevelop を使用しています。
ActionScriptで書かれたコードを上記環境でコンパイルすることにより、SWF(Shockwave Flash file)ファイルが生成されます。
このSWFファイルをウェブページなどに組み込めば、ランタイム環境で動作させることができます。</p>

<p>ActionScript には ActionScript 1.0/2.0/3.0 の各バージョンがあり、2.0からオブジェクト指向言語になっています。
ECMAScriptをベースに作られているため、Javascriptに似ており。また、オブジェクト指向言語になり、Javaにも似ている言語となっています。</p>

<h3>文法</h3>

<p>基本的なことと気になったことについて書いていきます。</p>

<h4>変数宣言</h4>

<p>var 変数名:型 で宣言します。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var num1:Number; //小数点付きまたは小数点なしの値を含むすべての数値
</span><span class='line'>var num2:int; //整数
</span><span class='line'>var num3:uint; //符号なし整数
</span><span class='line'>var boo:Boolean; //true か false の2値
</span><span class='line'>var str:String; //文字列</span></code></pre></td></tr></table></div></figure></notextile></div>
などがあります。</p>

<h4>文字列</h4>

<p>文字列はシングルクォートかダブルクォートを使って定義します。\n(改行)などの特殊文字を入れることもできます。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var str:String = "kaigyou¥n"</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>文字列を操作するメソッドも用意されており、Rubyみたいに使えます。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var str:String = "FLASH";
</span><span class='line'>trace(str.split(""));//traceを使用すると開発ツール上で実行したときに出力欄に表示される
</span><span class='line'>//>>F,L,A,S,H
</span><span class='line'>trace(str.length);//文字列の長さ
</span><span class='line'>//>>5
</span><span class='line'>trace([str, "TEST",].join("　"));//配列要素間を空白で結合
</span><span class='line'>//>>FLASH TEST</span></code></pre></td></tr></table></div></figure></notextile></div>
上記コードだけでは実行できないので、以下のようにコードを.asファイルに記載して実行(FlashDevelopではF5)します。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package
</span><span class='line'>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>import flash.display.Sprite;
</span><span class='line'>public class Main extends Sprite 
</span><span class='line'>{
</span><span class='line'>    public function Main():void 
</span><span class='line'>    {
</span><span class='line'>        var str:String = "FLASH";
</span><span class='line'>        trace(str.split(""));
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>配列</h4>

<p>配列用の型があるので、Arrayで宣言します。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var arr:Array;
</span><span class='line'>arr = [a,b,c];</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>配列も文字列と同じようにメソッドが用意されており、操作できます。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var arr:Array = ['a','b','c'];
</span><span class='line'>arr.push('d'); //末尾にデータ追加
</span><span class='line'>trace(arr);
</span><span class='line'>//>>[a,b,c,d]
</span><span class='line'>arr.pop(); //末尾のデータ取り出し
</span><span class='line'>trace(arr);
</span><span class='line'>//>>[a,b,c]</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>ハッシュ</h4>

<p>Object型を使って、ハッシュを作ります。Object型はすべてのクラス定義の基本クラスです。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var hash:Object = new Object();
</span><span class='line'>hash["program"] = "ActionScript"
</span><span class='line'>trace(hash["program"]);
</span><span class='line'>//>>ActionScript</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>ブロックスコープ</h4>

<p>変数は関数単位で管理しており、ブロック変数として宣言したつもりでも関数スコープになっています。(withを使えば、実現できるらしいです。)
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//多重定義でコンパイルエラー
</span><span class='line'>for ( var i:Number = 0; i &lt; 1; i++) {
</span><span class='line'>  i = 1;
</span><span class='line'>}
</span><span class='line'>for ( var i:String = 0; i &lt; 1; i++) {
</span><span class='line'>  i = 'a';
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>例外</h2>

<p>Javaのように例外をキャッチできます。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>try {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>//例外が検出したい処理
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>} catch (e:Error) {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>// 例外処理
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>クラス</h2>

<p>以下のようにクラス定義します。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package パッケージ名 { // パッケージ名省略可&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>import パッケージ.クラス名;
</span><span class='line'>
</span><span class='line'>public class Main(クラス名、仮にMain) extends 親クラス名
</span><span class='line'>{
</span><span class='line'>    // 変数宣言
</span><span class='line'>    アクセス修飾子 var プロパティ名:プロパティの型;
</span><span class='line'>
</span><span class='line'>    // コンストラクタ
</span><span class='line'>    アクセス修飾子 function Main()//コンストラクタ名
</span><span class='line'>    {
</span><span class='line'>        処理1
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    // メソッド1
</span><span class='line'>    アクセス修飾子 function メソッド名1(引数1:型 = デフォルト値):戻り値の型
</span><span class='line'>    {
</span><span class='line'>        処理2
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>表示リスト</h2>

<p>ActionScript 3.0 で構築されたアプリケーションには、表示リストと呼ばれるオブジェクトの階層があります。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ステージ //Stageクラス
</span><span class='line'>  - SWFファイルのメインクラスのインスタンス //自分で定義したクラス&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>- 表示オブジェクト //TextFieldなど
</span><span class='line'>- 表示オブジェクトコンテナ //Spriteクラス
</span><span class='line'>  -(表示オブジェクト/表示オブジェクトコンテナ)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div>
* ステージ</p>

<p>表示オブジェクトの基本コンテナ、各アプリケーションには1つのStageオブジェクトがあり、この中に画面の表示オブジェクトがすべて含まれます。
ステージは、表示リスト階層の最上位にあたります。
それぞれのSWFファイルには関連するActionScriptクラスがあり、これがSWFファイルのメインクラスと呼ばれます。
SWFファイルのメインクラスは、Spriteクラスを拡張して定義します。
SWFファイルが Flash Player または Adobe AIR 上で開かれると、SWFファイルのメインクラスのコンストラクタ関数が呼ばれ、
作成されるインスタンスがStageオブジェクトに子として追加されます。</p>

<ul>
<li>表示オブジェクト</li>
</ul>


<p>ActionScript 3.0 では、アプリケーション内で表示される全てのエレメントタイプは、表示オブジェクトです。</p>

<ul>
<li>表示オブジェクトコンテナ</li>
</ul>


<p>表示オブジェクトコンテナは特殊な型の表示オブジェクトです。
表示オブジェクトコンテナ(単にコンテナともいいます)は、それ自体が表示オブジェクトコンテナ/表示オブジェクトを子オブジェクトに含むことができます。
表示オブジェクトコンテナに子オブジェクトを追加するには addChild関数を使います。
表示オブジェクトコンテナとなりうる表示オブジェクトは Stage/MovieClip/Spriteクラスです。</p>

<h2>Hello ActionScript</h2>

<p>Flash上に「Hello ActionScript」と文字列を表示させます。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package hello
</span><span class='line'>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>import flash.display.Sprite; //画面表示の基本クラスのインポート
</span><span class='line'>import flash.text.*; //テキスト系のクラス
</span><span class='line'>public class Main extends Sprite
</span><span class='line'>{
</span><span class='line'>    public function Main (){//コンストラクタ
</span><span class='line'>        var textField:TextField = new TextField();//入れ物確保
</span><span class='line'>        textField.text = "Hello ActionScript";//文字列挿入
</span><span class='line'>        addChild(textField);//textFieldをSpriteクラスに追加して表示
</span><span class='line'>    }   
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>参考</h4>

<ul>
<li><a href="http://help.adobe.com/ja_JP/ActionScript/3.0_ProgrammingAS3/">Adobe ActionScript 3.0 * Adobe Flash 用 Adobe ActionScript</a> - 公式ドキュメント</li>
<li><a href="http://blog.livedoor.jp/takaaki_bb/archives/51374100.html">読書メモ＋tips＋日記 : [Flash] ActionScript 3.0 基礎文法最速マスター</a></li>
<li><a href="http://www40.atwiki.jp/spellbound/">ActionScript入門Wiki - トップページ</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
